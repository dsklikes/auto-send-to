var _UserConfig_builder, _UserConfig_storage, _UserConfig_onRenderForm, _UserConfig_onHandleFormResponse;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Devvit } from '../abstractions/Devvit.js';
import { ConfigFormBuilder } from './ConfigFormBuilder.js';
/**
 * Helper class to add and manage configuration to your actor.
 * Saves and loads all values to a KVStore with JSON encoding.
 */
export class UserConfig {
    /**
     * @param storage provide a custom KVStore or use the system default
     */
    constructor(storage = Devvit.use(Devvit.Types.KVStore)) {
        _UserConfig_builder.set(this, new ConfigFormBuilder());
        _UserConfig_storage.set(this, void 0);
        _UserConfig_onRenderForm.set(this, async () => {
            const form = __classPrivateFieldGet(this, _UserConfig_builder, "f").build();
            // Gather the user-defined keys
            const keys = form.fields.map((f) => f.key);
            // Get all the current values to populate the form
            const currentValues = (await __classPrivateFieldGet(this, _UserConfig_storage, "f").Get({ keys })).messages;
            for (const field of form.fields) {
                field.response = currentValues[field.key] || JSON.stringify('');
            }
            return form;
        });
        _UserConfig_onHandleFormResponse.set(this, async (response) => {
            const messages = {};
            // format the responses into a MessageSet to save in KVStore
            for (const field of response.fields) {
                messages[field.key] = field.response;
            }
            await __classPrivateFieldGet(this, _UserConfig_storage, "f").Put({ messages: messages });
            return { success: true };
        });
        __classPrivateFieldSet(this, _UserConfig_storage, storage, "f");
        Devvit.UserConfigurable.onRenderForm(__classPrivateFieldGet(this, _UserConfig_onRenderForm, "f"));
        Devvit.UserConfigurable.onHandleFormResponse(__classPrivateFieldGet(this, _UserConfig_onHandleFormResponse, "f"));
    }
    builder() {
        return __classPrivateFieldGet(this, _UserConfig_builder, "f");
    }
    /**
     * Retrieve a value from user configuration
     */
    async get(key) {
        return JSON.parse((await __classPrivateFieldGet(this, _UserConfig_storage, "f").Get({ keys: [key] })).messages[key]);
    }
}
_UserConfig_builder = new WeakMap(), _UserConfig_storage = new WeakMap(), _UserConfig_onRenderForm = new WeakMap(), _UserConfig_onHandleFormResponse = new WeakMap();
