var _LinkedBundleClientFactory_instances, _LinkedBundleClientFactory_dispatcher, _LinkedBundleClientFactory_bundle, _LinkedBundleClientFactory_logger, _LinkedBundleClientFactory_hostnameMatching;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { EnvelopeClientBuilder } from '../envelope/EnvelopeClientBuilder.js';
// to-do: use named export.
export default class LinkedBundleClientFactory {
    constructor(dispatcher, bundle, logger) {
        _LinkedBundleClientFactory_instances.add(this);
        _LinkedBundleClientFactory_dispatcher.set(this, void 0);
        _LinkedBundleClientFactory_bundle.set(this, void 0);
        _LinkedBundleClientFactory_logger.set(this, void 0);
        __classPrivateFieldSet(this, _LinkedBundleClientFactory_dispatcher, dispatcher, "f");
        __classPrivateFieldSet(this, _LinkedBundleClientFactory_bundle, bundle, "f");
        __classPrivateFieldSet(this, _LinkedBundleClientFactory_logger, logger, "f");
    }
    Build(desc, query) {
        const hostname = __classPrivateFieldGet(this, _LinkedBundleClientFactory_instances, "m", _LinkedBundleClientFactory_hostnameMatching).call(this, query);
        const client = EnvelopeClientBuilder.build(hostname, [desc], __classPrivateFieldGet(this, _LinkedBundleClientFactory_logger, "f"));
        __classPrivateFieldGet(this, _LinkedBundleClientFactory_dispatcher, "f").bind(client);
        return client;
    }
}
_LinkedBundleClientFactory_dispatcher = new WeakMap(), _LinkedBundleClientFactory_bundle = new WeakMap(), _LinkedBundleClientFactory_logger = new WeakMap(), _LinkedBundleClientFactory_instances = new WeakSet(), _LinkedBundleClientFactory_hostnameMatching = function _LinkedBundleClientFactory_hostnameMatching(query) {
    const typeName = query.typeName.split('.').reverse()[0];
    for (const uses of __classPrivateFieldGet(this, _LinkedBundleClientFactory_bundle, "f").uses || []) {
        for (const provides of uses.provides || []) {
            if (provides.name == typeName) {
                return uses.hostname;
            }
        }
    }
    const provides = __classPrivateFieldGet(this, _LinkedBundleClientFactory_bundle, "f").uses
        .flatMap((use) => use.provides)
        .map((provide) => provide.name)
        .join(', ');
    throw Error(`LinkedBundle dependency on ${typeName} not specified. Options are: ${provides}.`);
};
