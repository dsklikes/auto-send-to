var _SocketEnvelopeRecipient_port;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { PortEnvelopeRecipient } from '../envelope/PortEnvelopeRecipient.js';
import { SocketEnvelopePort } from './SocketEnvelopePort.js';
// TODO: Reconnect?
export class SocketEnvelopeRecipient extends PortEnvelopeRecipient {
    get id() {
        return __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").id;
    }
    constructor(type, hostname, port = new SocketEnvelopePort()) {
        super(hostname, port);
        _SocketEnvelopeRecipient_port.set(this, void 0);
        if (type != null)
            this.type = type;
        __classPrivateFieldSet(this, _SocketEnvelopeRecipient_port, port, "f");
    }
    async bindSocket(socket) {
        await __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").bindSocket(socket);
    }
    unbindSocket() {
        __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").unbindSocket();
    }
    async dispose() {
        await super.dispose();
        this.unbindSocket();
    }
}
_SocketEnvelopeRecipient_port = new WeakMap();
