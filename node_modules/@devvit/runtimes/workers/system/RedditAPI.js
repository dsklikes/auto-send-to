import '../WorkerInit.js';
import { FlairDefinition, HTTPDefinition, LinksAndCommentsDefinition, ListingsDefinition, ModerationDefinition, ModNoteDefinition, NewModmailDefinition, PrivateMessagesDefinition, SubredditsDefinition, UsersDefinition, WidgetsDefinition, WikiDefinition, } from '@devvit/protos';
import { WorkerDispatcher } from '../../common/envelope/dispatcher/WorkerDispatcher.js';
import { EnvelopeClientBuilder } from '../../common/envelope/EnvelopeClientBuilder.js';
import { EnvelopeServerBuilder } from '../../common/envelope/EnvelopeServerBuilder.js';
import { childHostname, resolvePluginHostname } from '../../lib/HostnameUtil.js';
import { Log } from '../../lib/loggers/Log.js';
import { Flair } from '../../plugins/redditapi/Flair.js';
import { LinksAndComments } from '../../plugins/redditapi/LinksAndComments.js';
import { Listings } from '../../plugins/redditapi/Listings.js';
import { Moderation } from '../../plugins/redditapi/Moderation.js';
import { ModNote } from '../../plugins/redditapi/ModNote.js';
import { NewModmail } from '../../plugins/redditapi/NewModmail.js';
import { PrivateMessages } from '../../plugins/redditapi/PrivateMessages.js';
import { Subreddits } from '../../plugins/redditapi/Subreddits.js';
import { Users } from '../../plugins/redditapi/Users.js';
import { Widgets } from '../../plugins/redditapi/Widgets.js';
import { Wiki } from '../../plugins/redditapi/Wiki.js';
// Create an RPC wrapper around the port
const dispatcher = new WorkerDispatcher(self.name);
dispatcher.bindToWorkerPort(self);
const apiCategories = [
    {
        cname: 'listings',
        constructor: Listings,
        definition: ListingsDefinition,
    },
    {
        cname: 'modnote',
        constructor: ModNote,
        definition: ModNoteDefinition,
    },
    {
        cname: 'newmodmail',
        constructor: NewModmail,
        definition: NewModmailDefinition,
    },
    {
        cname: 'flair',
        constructor: Flair,
        definition: FlairDefinition,
    },
    {
        cname: 'linksandcomments',
        constructor: LinksAndComments,
        definition: LinksAndCommentsDefinition,
    },
    {
        cname: 'moderation',
        constructor: Moderation,
        definition: ModerationDefinition,
    },
    {
        cname: 'privatemessages',
        constructor: PrivateMessages,
        definition: PrivateMessagesDefinition,
    },
    {
        cname: 'subreddits',
        constructor: Subreddits,
        definition: SubredditsDefinition,
    },
    {
        cname: 'users',
        constructor: Users,
        definition: UsersDefinition,
    },
    {
        cname: 'widgets',
        constructor: Widgets,
        definition: WidgetsDefinition,
    },
    {
        cname: 'wiki',
        constructor: Wiki,
        definition: WikiDefinition,
    },
];
const httpClient = getHttpClient();
// The Reddit API surface is an absolute unit,
// so we separate the methods into categories
// based on the classification in the reddit
// API docs: https://www.reddit.com/dev/api
for (const cat of apiCategories) {
    const hostname = childHostname(cat.cname, { hostname: dispatcher.hostname });
    const client = new cat.constructor(httpClient);
    const server = EnvelopeServerBuilder.build(hostname, [cat.definition], client);
    dispatcher.bind(server);
}
Log.verbose(`${self.name} ready.`);
// All categories can use the same http client
// since the client is stateless
function getHttpClient() {
    const rootHostname = self.name.split('.').at(-1);
    const client = EnvelopeClientBuilder.build(resolvePluginHostname('http', { hostname: rootHostname }), [HTTPDefinition]);
    dispatcher.bind(client);
    return client;
}
