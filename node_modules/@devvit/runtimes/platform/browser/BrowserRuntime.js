var _BrowserRuntime_workerPathsByName;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { AutomodRegexDefinition, ClockDefinition, KVStoreDefinition, ModlogDefinition, SchedulerDefinition, StreamBrokerDefinition, V2EventsDefinition, } from '@devvit/protos';
import { CommonRuntime } from '../../common/runtime/CommonRuntime.js';
import { Never } from '../../common/runtime/GCPolicy.js';
import { LOCAL_HOSTNAME } from '../../lib/HostnameUtil.js';
import { Log, voidConsole } from '../../lib/loggers/Log.js';
import AutomodRegex from '../../plugins/AutomodRegex.js';
import Clock from '../../plugins/Clock.js';
import { LocalStorageBroker } from '../../plugins/LocalStorageBroker.js';
import { LocalStorageKV } from '../../plugins/LocalStorageKV.js';
import Modlog from '../../plugins/Modlog.js';
import { Scheduler } from '../../plugins/Scheduler.js';
import { V2Events } from '../../plugins/V2Events.js';
const isDebug = true;
// to-do: rename to WebRuntime to match "web workers".
export class BrowserRuntime extends CommonRuntime {
    constructor(workerPathsByName, options = {}) {
        const { namespace = LOCAL_HOSTNAME } = options;
        super(namespace, Never, isDebug && options.logLevel !== 'off' ? Log.error : undefined);
        _BrowserRuntime_workerPathsByName.set(this, void 0);
        if (options.logLevel === 'off')
            Log.setLogger(voidConsole);
        __classPrivateFieldSet(this, _BrowserRuntime_workerPathsByName, workerPathsByName, "f");
    }
    pathForName(name) {
        if (!__classPrivateFieldGet(this, _BrowserRuntime_workerPathsByName, "f").has(name)) {
            throw new Error(`No path for worker named "${name}".`);
        }
        return __classPrivateFieldGet(this, _BrowserRuntime_workerPathsByName, "f").get(name);
    }
    makeWebSocket(url) {
        return new WebSocket(url);
    }
    loadPlugins(dispatcher) {
        this.provide(KVStoreDefinition, new LocalStorageKV(localStorage));
        this.provide(StreamBrokerDefinition, new LocalStorageBroker(sessionStorage));
        this.provide(ClockDefinition, new Clock());
        this.provide(SchedulerDefinition, new Scheduler(dispatcher));
        this.provide(AutomodRegexDefinition, new AutomodRegex());
        this.provide(ModlogDefinition, new Modlog());
        this.provide(V2EventsDefinition, new V2Events());
    }
}
_BrowserRuntime_workerPathsByName = new WeakMap();
