var _ClientSocketEnvelopeRecipient_suffix;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { SocketEnvelopeRecipient } from '../../common/websocket/SocketEnvelopeRecipient.js';
import { isDescendantHostname } from '../../lib/HostnameUtil.js';
import { NonNull } from '@devvit/shared-types/NonNull.js';
export class ClientSocketEnvelopeRecipient extends SocketEnvelopeRecipient {
    constructor(namespace) {
        const hostname = NonNull(namespace.hostname, 'Namespace unbound.');
        super('client', hostname);
        _ClientSocketEnvelopeRecipient_suffix.set(this, void 0);
        __classPrivateFieldSet(this, _ClientSocketEnvelopeRecipient_suffix, `.${hostname}`, "f");
    }
    post(caller, envelope) {
        if (!isDescendantHostname(envelope.dst, this.hostname))
            throw Error(`Envelope had unknown destination namespace ${envelope.dst} but only *.${this.hostname} hostnames expected.`);
        envelope.dst = envelope.dst.slice(0, -__classPrivateFieldGet(this, _ClientSocketEnvelopeRecipient_suffix, "f").length);
        super.post(caller, envelope);
    }
    onMessage(event) {
        const envelope = event.data;
        envelope.src += __classPrivateFieldGet(this, _ClientSocketEnvelopeRecipient_suffix, "f");
        super.onMessage(event);
    }
}
_ClientSocketEnvelopeRecipient_suffix = new WeakMap();
