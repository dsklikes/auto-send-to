var _MultiLogger_loggers;
import { __classPrivateFieldGet } from "tslib";
export class MultiLogger {
    constructor(...loggers) {
        _MultiLogger_loggers.set(this, []);
        __classPrivateFieldGet(this, _MultiLogger_loggers, "f").push(...loggers);
    }
    addLogger(logger) {
        __classPrivateFieldGet(this, _MultiLogger_loggers, "f").push(logger);
    }
    async Error(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((logger) => logger.Error(msg, metadata)));
        return {};
    }
    async Event(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((logger) => logger.Event(msg, metadata)));
        return {};
    }
    async Log(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((l) => l.Log(msg, metadata)));
        return {};
    }
}
_MultiLogger_loggers = new WeakMap();
