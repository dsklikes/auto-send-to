import { RedditAPI } from './RedditAPI.js';
import { Empty, Listing, } from '@devvit/protos';
export class PrivateMessages extends RedditAPI {
    async Block(request, metadata) {
        await this._fetch('Block', request, metadata);
        return Empty.fromPartial({});
    }
    async CollapseMessage(request, metadata) {
        await this._fetch('CollapseMessage', request, metadata);
        return Empty.fromPartial({});
    }
    async Compose(request, metadata) {
        await this._fetch('Compose', request, metadata);
        return Empty.fromPartial({});
    }
    async DelMsg(request, metadata) {
        await this._fetch('DelMsg', request, metadata);
        return Empty.fromPartial({});
    }
    async ReadAllMessages(request, metadata) {
        await this._fetch('ReadAllMessages', request, metadata);
        return Empty.fromPartial({});
    }
    async ReadMessage(request, metadata) {
        await this._fetch('ReadMessage', request, metadata);
        return Empty.fromPartial({});
    }
    async UnblockSubreddit(request, metadata) {
        await this._fetch('UnblockSubreddit', request, metadata);
        return Empty.fromPartial({});
    }
    async UncollapseMessage(request, metadata) {
        await this._fetch('UncollapseMessage', request, metadata);
        return Empty.fromPartial({});
    }
    async UnreadMessage(request, metadata) {
        await this._fetch('UnreadMessage', request, metadata);
        return Empty.fromPartial({});
    }
    async MessageWhere(request, metadata) {
        const response = await this._fetch('MessageWhere', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
}
