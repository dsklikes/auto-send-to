syntax = "proto3";

package devvit.dev_portal;

import "devvit/dev_portal/app/app.proto";
import "devvit/dev_portal/app/info/app_info.proto";
import "devvit/dev_portal/app_version/app_version.proto";
import "devvit/dev_portal/app_version/info/app_version_info.proto";
import "devvit/dev_portal/feedback/feedback.proto";
import "devvit/dev_portal/installation/installation.proto";
import "devvit/dev_portal/installation_settings/installation_settings.proto";
import "devvit/uuid.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

service App {
  rpc Create(app.AppCreationRequest) returns (app.info.AppInfo);

  rpc Search(app.AppSearchRequest) returns (app.AppSearchResponse);

  rpc GetBySlug(app.GetAppBySlugRequest) returns (app.FullAppInfo);
  rpc GetByUUID(UUID) returns (app.FullAppInfo);

  rpc GetAllWithLocation(installation.GetAllWithInstallLocationRequest) returns (app.info.MultipleAppInfos);
  rpc GetAllWithInstaller(installation.GetAllWithInstallerRequest) returns (app.info.MultipleAppInfos);
  rpc GetAllWithOwner(app.GetAllWithOwnerRequest) returns (app.info.MultipleAppInfos);

  // Get the X most popular apps, as determined by number of installations.
  rpc GetPopularApps(app.GetPopularAppsRequest) returns (app.info.MultipleAppInfos);

  rpc Update(app.AppUpdateRequest) returns (app.FullAppInfo);

  rpc Unpublish(app.UnpublishAppRequest) returns (google.protobuf.Empty);

  rpc Exists(app.AppExistsRequest) returns (app.AppExistsResponse);

  rpc AppAccountExists(app.AppAccountExistsRequest) returns (app.AppAccountExistsResponse);
}

service AppVersion {
  rpc Create(app_version.AppVersionCreationRequest) returns (app_version.info.AppVersionInfo);

  rpc Get(UUID) returns (app_version.FullAppVersionInfo);
  rpc GetBySlugAndVersionNumber(app_version.AppSlugAndVersion) returns (app_version.FullAppVersionInfo);

  rpc Update(app_version.AppVersionUpdateRequest) returns (app_version.FullAppVersionInfo);

  rpc GetValidInstallLocations(UUID) returns (app_version.ValidInstallLocationsResponse);
}

// Currently, there are no Actors or ActorTypes services. If use cases appear for either of these
// services, this is where they'd go.

service Installations {
  rpc Create(installation.InstallationCreationRequest) returns (installation.FullInstallationInfo);

  rpc GetByUUID(UUID) returns (installation.FullInstallationInfo);
  rpc GetByAppNameAndInstallLocation(installation.GetByAppNameAndInstallLocationRequest) returns (installation.FullInstallationInfo);

  rpc GetAllWithInstallLocation(installation.GetAllWithInstallLocationRequest) returns (installation.MultipleInstallationsResponse);
  rpc GetAllWithInstaller(installation.GetAllWithInstallerRequest) returns (installation.MultipleInstallationsResponse);
  rpc GetAllWithVersionUUID(UUID) returns (installation.MultipleInstallationsResponse);
  rpc GetAllWithApp(UUID) returns (installation.GetAllWithAppResponse);
  rpc GetInstallationHistory(installation.GetInstallationHistoryRequest) returns (installation.GetInstallationHistoryResponse);

  rpc Upgrade(installation.InstallationUpgradeRequest) returns (installation.FullInstallationInfo);

  rpc Update(installation.InstallationUpdateRequest) returns (installation.FullInstallationInfo);

  rpc Remove(UUID) returns (google.protobuf.Empty);
}

service Feedback {
  rpc Create(feedback.CreateFeedbackRequest) returns (google.protobuf.Empty);
}

// A service to handle client-side events.
service Events {
  // Fire off a client-side event
  rpc SendEvent(google.protobuf.Value) returns (google.protobuf.Empty);
}

service DevPortalInstallationSettings {
  rpc GetForm(installation_settings.GetInstallationSettingsFormRequest) returns (installation_settings.GetInstallationSettingsFormResponse);
  rpc ValidateForm(installation_settings.ValidateInstallationSettingsFormRequest) returns (installation_settings.ValidateInstallationSettingsFormResponse);
  rpc GetSettings(installation_settings.GetInstallationSettingsRequest) returns (installation_settings.GetInstallationSettingsResponse);
  rpc UpdateSettings(installation_settings.UpdateInstallationSettingsRequest) returns (installation_settings.UpdateInstallationSettingsResponse);
}
