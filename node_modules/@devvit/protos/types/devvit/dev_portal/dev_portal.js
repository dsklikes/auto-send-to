/**
 * #dev_portal.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../google/protobuf/empty.js';
import { Value } from '../../google/protobuf/struct.js';
import { UUID } from '../uuid.js';
import { AppAccountExistsRequest, AppAccountExistsResponse, AppCreationRequest, AppExistsRequest, AppExistsResponse, AppSearchRequest, AppSearchResponse, AppUpdateRequest, FullAppInfo, GetAllWithOwnerRequest, GetAppBySlugRequest, GetPopularAppsRequest, UnpublishAppRequest, } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { AppSlugAndVersion, AppVersionCreationRequest, AppVersionUpdateRequest, FullAppVersionInfo, ValidInstallLocationsResponse, } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { FullInstallationInfo, GetAllWithAppResponse, GetAllWithInstallerRequest, GetAllWithInstallLocationRequest, GetByAppNameAndInstallLocationRequest, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationCreationRequest, InstallationUpdateRequest, InstallationUpgradeRequest, MultipleInstallationsResponse, } from './installation/installation.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, } from './installation_settings/installation_settings.js';
export class AppClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.App";
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Search = this.Search.bind(this);
        this.GetBySlug = this.GetBySlug.bind(this);
        this.GetByUUID = this.GetByUUID.bind(this);
        this.GetAllWithLocation = this.GetAllWithLocation.bind(this);
        this.GetAllWithInstaller = this.GetAllWithInstaller.bind(this);
        this.GetAllWithOwner = this.GetAllWithOwner.bind(this);
        this.GetPopularApps = this.GetPopularApps.bind(this);
        this.Update = this.Update.bind(this);
        this.Unpublish = this.Unpublish.bind(this);
        this.Exists = this.Exists.bind(this);
        this.AppAccountExists = this.AppAccountExists.bind(this);
    }
    Create(request) {
        const data = AppCreationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => AppInfo.decode(new _m0.Reader(data)));
    }
    Search(request) {
        const data = AppSearchRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Search", data);
        return promise.then((data) => AppSearchResponse.decode(new _m0.Reader(data)));
    }
    GetBySlug(request) {
        const data = GetAppBySlugRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetBySlug", data);
        return promise.then((data) => FullAppInfo.decode(new _m0.Reader(data)));
    }
    GetByUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetByUUID", data);
        return promise.then((data) => FullAppInfo.decode(new _m0.Reader(data)));
    }
    GetAllWithLocation(request) {
        const data = GetAllWithInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithLocation", data);
        return promise.then((data) => MultipleAppInfos.decode(new _m0.Reader(data)));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithInstaller", data);
        return promise.then((data) => MultipleAppInfos.decode(new _m0.Reader(data)));
    }
    GetAllWithOwner(request) {
        const data = GetAllWithOwnerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithOwner", data);
        return promise.then((data) => MultipleAppInfos.decode(new _m0.Reader(data)));
    }
    GetPopularApps(request) {
        const data = GetPopularAppsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPopularApps", data);
        return promise.then((data) => MultipleAppInfos.decode(new _m0.Reader(data)));
    }
    Update(request) {
        const data = AppUpdateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => FullAppInfo.decode(new _m0.Reader(data)));
    }
    Unpublish(request) {
        const data = UnpublishAppRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unpublish", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Exists(request) {
        const data = AppExistsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Exists", data);
        return promise.then((data) => AppExistsResponse.decode(new _m0.Reader(data)));
    }
    AppAccountExists(request) {
        const data = AppAccountExistsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AppAccountExists", data);
        return promise.then((data) => AppAccountExistsResponse.decode(new _m0.Reader(data)));
    }
}
export const AppDefinition = {
    name: "App",
    fullName: "devvit.dev_portal.App",
    methods: {
        create: {
            name: "Create",
            requestType: AppCreationRequest,
            requestStream: false,
            responseType: AppInfo,
            responseStream: false,
            options: {},
        },
        search: {
            name: "Search",
            requestType: AppSearchRequest,
            requestStream: false,
            responseType: AppSearchResponse,
            responseStream: false,
            options: {},
        },
        getBySlug: {
            name: "GetBySlug",
            requestType: GetAppBySlugRequest,
            requestStream: false,
            responseType: FullAppInfo,
            responseStream: false,
            options: {},
        },
        getByUUID: {
            name: "GetByUUID",
            requestType: UUID,
            requestStream: false,
            responseType: FullAppInfo,
            responseStream: false,
            options: {},
        },
        getAllWithLocation: {
            name: "GetAllWithLocation",
            requestType: GetAllWithInstallLocationRequest,
            requestStream: false,
            responseType: MultipleAppInfos,
            responseStream: false,
            options: {},
        },
        getAllWithInstaller: {
            name: "GetAllWithInstaller",
            requestType: GetAllWithInstallerRequest,
            requestStream: false,
            responseType: MultipleAppInfos,
            responseStream: false,
            options: {},
        },
        getAllWithOwner: {
            name: "GetAllWithOwner",
            requestType: GetAllWithOwnerRequest,
            requestStream: false,
            responseType: MultipleAppInfos,
            responseStream: false,
            options: {},
        },
        /** Get the X most popular apps, as determined by number of installations. */
        getPopularApps: {
            name: "GetPopularApps",
            requestType: GetPopularAppsRequest,
            requestStream: false,
            responseType: MultipleAppInfos,
            responseStream: false,
            options: {},
        },
        update: {
            name: "Update",
            requestType: AppUpdateRequest,
            requestStream: false,
            responseType: FullAppInfo,
            responseStream: false,
            options: {},
        },
        unpublish: {
            name: "Unpublish",
            requestType: UnpublishAppRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        exists: {
            name: "Exists",
            requestType: AppExistsRequest,
            requestStream: false,
            responseType: AppExistsResponse,
            responseStream: false,
            options: {},
        },
        appAccountExists: {
            name: "AppAccountExists",
            requestType: AppAccountExistsRequest,
            requestStream: false,
            responseType: AppAccountExistsResponse,
            responseStream: false,
            options: {},
        },
    },
};
export class AppVersionClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.AppVersion";
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Get = this.Get.bind(this);
        this.GetBySlugAndVersionNumber = this.GetBySlugAndVersionNumber.bind(this);
        this.Update = this.Update.bind(this);
        this.GetValidInstallLocations = this.GetValidInstallLocations.bind(this);
    }
    Create(request) {
        const data = AppVersionCreationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => AppVersionInfo.decode(new _m0.Reader(data)));
    }
    Get(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "Get", data);
        return promise.then((data) => FullAppVersionInfo.decode(new _m0.Reader(data)));
    }
    GetBySlugAndVersionNumber(request) {
        const data = AppSlugAndVersion.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetBySlugAndVersionNumber", data);
        return promise.then((data) => FullAppVersionInfo.decode(new _m0.Reader(data)));
    }
    Update(request) {
        const data = AppVersionUpdateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => FullAppVersionInfo.decode(new _m0.Reader(data)));
    }
    GetValidInstallLocations(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetValidInstallLocations", data);
        return promise.then((data) => ValidInstallLocationsResponse.decode(new _m0.Reader(data)));
    }
}
export const AppVersionDefinition = {
    name: "AppVersion",
    fullName: "devvit.dev_portal.AppVersion",
    methods: {
        create: {
            name: "Create",
            requestType: AppVersionCreationRequest,
            requestStream: false,
            responseType: AppVersionInfo,
            responseStream: false,
            options: {},
        },
        get: {
            name: "Get",
            requestType: UUID,
            requestStream: false,
            responseType: FullAppVersionInfo,
            responseStream: false,
            options: {},
        },
        getBySlugAndVersionNumber: {
            name: "GetBySlugAndVersionNumber",
            requestType: AppSlugAndVersion,
            requestStream: false,
            responseType: FullAppVersionInfo,
            responseStream: false,
            options: {},
        },
        update: {
            name: "Update",
            requestType: AppVersionUpdateRequest,
            requestStream: false,
            responseType: FullAppVersionInfo,
            responseStream: false,
            options: {},
        },
        getValidInstallLocations: {
            name: "GetValidInstallLocations",
            requestType: UUID,
            requestStream: false,
            responseType: ValidInstallLocationsResponse,
            responseStream: false,
            options: {},
        },
    },
};
export class InstallationsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.Installations";
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.GetByUUID = this.GetByUUID.bind(this);
        this.GetByAppNameAndInstallLocation = this.GetByAppNameAndInstallLocation.bind(this);
        this.GetAllWithInstallLocation = this.GetAllWithInstallLocation.bind(this);
        this.GetAllWithInstaller = this.GetAllWithInstaller.bind(this);
        this.GetAllWithVersionUUID = this.GetAllWithVersionUUID.bind(this);
        this.GetAllWithApp = this.GetAllWithApp.bind(this);
        this.GetInstallationHistory = this.GetInstallationHistory.bind(this);
        this.Upgrade = this.Upgrade.bind(this);
        this.Update = this.Update.bind(this);
        this.Remove = this.Remove.bind(this);
    }
    Create(request) {
        const data = InstallationCreationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => FullInstallationInfo.decode(new _m0.Reader(data)));
    }
    GetByUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetByUUID", data);
        return promise.then((data) => FullInstallationInfo.decode(new _m0.Reader(data)));
    }
    GetByAppNameAndInstallLocation(request) {
        const data = GetByAppNameAndInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetByAppNameAndInstallLocation", data);
        return promise.then((data) => FullInstallationInfo.decode(new _m0.Reader(data)));
    }
    GetAllWithInstallLocation(request) {
        const data = GetAllWithInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithInstallLocation", data);
        return promise.then((data) => MultipleInstallationsResponse.decode(new _m0.Reader(data)));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithInstaller", data);
        return promise.then((data) => MultipleInstallationsResponse.decode(new _m0.Reader(data)));
    }
    GetAllWithVersionUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithVersionUUID", data);
        return promise.then((data) => MultipleInstallationsResponse.decode(new _m0.Reader(data)));
    }
    GetAllWithApp(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAllWithApp", data);
        return promise.then((data) => GetAllWithAppResponse.decode(new _m0.Reader(data)));
    }
    GetInstallationHistory(request) {
        const data = GetInstallationHistoryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInstallationHistory", data);
        return promise.then((data) => GetInstallationHistoryResponse.decode(new _m0.Reader(data)));
    }
    Upgrade(request) {
        const data = InstallationUpgradeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Upgrade", data);
        return promise.then((data) => FullInstallationInfo.decode(new _m0.Reader(data)));
    }
    Update(request) {
        const data = InstallationUpdateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => FullInstallationInfo.decode(new _m0.Reader(data)));
    }
    Remove(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request(this.service, "Remove", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const InstallationsDefinition = {
    name: "Installations",
    fullName: "devvit.dev_portal.Installations",
    methods: {
        create: {
            name: "Create",
            requestType: InstallationCreationRequest,
            requestStream: false,
            responseType: FullInstallationInfo,
            responseStream: false,
            options: {},
        },
        getByUUID: {
            name: "GetByUUID",
            requestType: UUID,
            requestStream: false,
            responseType: FullInstallationInfo,
            responseStream: false,
            options: {},
        },
        getByAppNameAndInstallLocation: {
            name: "GetByAppNameAndInstallLocation",
            requestType: GetByAppNameAndInstallLocationRequest,
            requestStream: false,
            responseType: FullInstallationInfo,
            responseStream: false,
            options: {},
        },
        getAllWithInstallLocation: {
            name: "GetAllWithInstallLocation",
            requestType: GetAllWithInstallLocationRequest,
            requestStream: false,
            responseType: MultipleInstallationsResponse,
            responseStream: false,
            options: {},
        },
        getAllWithInstaller: {
            name: "GetAllWithInstaller",
            requestType: GetAllWithInstallerRequest,
            requestStream: false,
            responseType: MultipleInstallationsResponse,
            responseStream: false,
            options: {},
        },
        getAllWithVersionUUID: {
            name: "GetAllWithVersionUUID",
            requestType: UUID,
            requestStream: false,
            responseType: MultipleInstallationsResponse,
            responseStream: false,
            options: {},
        },
        getAllWithApp: {
            name: "GetAllWithApp",
            requestType: UUID,
            requestStream: false,
            responseType: GetAllWithAppResponse,
            responseStream: false,
            options: {},
        },
        getInstallationHistory: {
            name: "GetInstallationHistory",
            requestType: GetInstallationHistoryRequest,
            requestStream: false,
            responseType: GetInstallationHistoryResponse,
            responseStream: false,
            options: {},
        },
        upgrade: {
            name: "Upgrade",
            requestType: InstallationUpgradeRequest,
            requestStream: false,
            responseType: FullInstallationInfo,
            responseStream: false,
            options: {},
        },
        update: {
            name: "Update",
            requestType: InstallationUpdateRequest,
            requestStream: false,
            responseType: FullInstallationInfo,
            responseStream: false,
            options: {},
        },
        remove: {
            name: "Remove",
            requestType: UUID,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
export class FeedbackClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.Feedback";
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
    }
    Create(request) {
        const data = CreateFeedbackRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const FeedbackDefinition = {
    name: "Feedback",
    fullName: "devvit.dev_portal.Feedback",
    methods: {
        create: {
            name: "Create",
            requestType: CreateFeedbackRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
export class EventsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.Events";
        this.rpc = rpc;
        this.SendEvent = this.SendEvent.bind(this);
    }
    SendEvent(request) {
        const data = Value.encode(request).finish();
        const promise = this.rpc.request(this.service, "SendEvent", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const EventsDefinition = {
    name: "Events",
    fullName: "devvit.dev_portal.Events",
    methods: {
        /** Fire off a client-side event */
        sendEvent: {
            name: "SendEvent",
            requestType: Value,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
export class DevPortalInstallationSettingsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.DevPortalInstallationSettings";
        this.rpc = rpc;
        this.GetForm = this.GetForm.bind(this);
        this.ValidateForm = this.ValidateForm.bind(this);
        this.GetSettings = this.GetSettings.bind(this);
        this.UpdateSettings = this.UpdateSettings.bind(this);
    }
    GetForm(request) {
        const data = GetInstallationSettingsFormRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForm", data);
        return promise.then((data) => GetInstallationSettingsFormResponse.decode(new _m0.Reader(data)));
    }
    ValidateForm(request) {
        const data = ValidateInstallationSettingsFormRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ValidateForm", data);
        return promise.then((data) => ValidateInstallationSettingsFormResponse.decode(new _m0.Reader(data)));
    }
    GetSettings(request) {
        const data = GetInstallationSettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSettings", data);
        return promise.then((data) => GetInstallationSettingsResponse.decode(new _m0.Reader(data)));
    }
    UpdateSettings(request) {
        const data = UpdateInstallationSettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateSettings", data);
        return promise.then((data) => UpdateInstallationSettingsResponse.decode(new _m0.Reader(data)));
    }
}
export const DevPortalInstallationSettingsDefinition = {
    name: "DevPortalInstallationSettings",
    fullName: "devvit.dev_portal.DevPortalInstallationSettings",
    methods: {
        getForm: {
            name: "GetForm",
            requestType: GetInstallationSettingsFormRequest,
            requestStream: false,
            responseType: GetInstallationSettingsFormResponse,
            responseStream: false,
            options: {},
        },
        validateForm: {
            name: "ValidateForm",
            requestType: ValidateInstallationSettingsFormRequest,
            requestStream: false,
            responseType: ValidateInstallationSettingsFormResponse,
            responseStream: false,
            options: {},
        },
        getSettings: {
            name: "GetSettings",
            requestType: GetInstallationSettingsRequest,
            requestStream: false,
            responseType: GetInstallationSettingsResponse,
            responseStream: false,
            options: {},
        },
        updateSettings: {
            name: "UpdateSettings",
            requestType: UpdateInstallationSettingsRequest,
            requestStream: false,
            responseType: UpdateInstallationSettingsResponse,
            responseStream: false,
            options: {},
        },
    },
};
