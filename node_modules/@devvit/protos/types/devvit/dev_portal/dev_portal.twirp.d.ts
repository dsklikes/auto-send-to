/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { AppCreationRequest, AppSearchRequest, AppSearchResponse, GetAppBySlugRequest, FullAppInfo, GetAllWithOwnerRequest, GetPopularAppsRequest, AppUpdateRequest, UnpublishAppRequest, AppExistsRequest, AppExistsResponse, AppAccountExistsRequest, AppAccountExistsResponse } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { UUID } from '../uuid.js';
import { GetAllWithInstallLocationRequest, GetAllWithInstallerRequest, InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, MultipleInstallationsResponse, GetAllWithAppResponse, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationUpgradeRequest, InstallationUpdateRequest } from './installation/installation.js';
import { Empty } from '../../google/protobuf/empty.js';
import { AppVersionCreationRequest, FullAppVersionInfo, AppSlugAndVersion, AppVersionUpdateRequest, ValidInstallLocationsResponse } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { Value } from '../../google/protobuf/struct.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse } from './installation_settings/installation_settings.js';
export interface AppTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: AppCreationRequest): Promise<AppInfo>;
    Search(ctx: T, request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(ctx: T, request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(ctx: T, request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(ctx: T, request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(ctx: T, request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(ctx: T, request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(ctx: T, request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    Update(ctx: T, request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(ctx: T, request: UnpublishAppRequest): Promise<Empty>;
    Exists(ctx: T, request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(ctx: T, request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
}
export declare enum AppMethod {
    Create = "Create",
    Search = "Search",
    GetBySlug = "GetBySlug",
    GetByUUID = "GetByUUID",
    GetAllWithLocation = "GetAllWithLocation",
    GetAllWithInstaller = "GetAllWithInstaller",
    GetAllWithOwner = "GetAllWithOwner",
    GetPopularApps = "GetPopularApps",
    Update = "Update",
    Unpublish = "Unpublish",
    Exists = "Exists",
    AppAccountExists = "AppAccountExists"
}
export declare const AppMethodList: AppMethod[];
export declare function createAppServer<T extends TwirpContext = TwirpContext>(service: AppTwirp<T>): TwirpServer<AppTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface AppVersionTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(ctx: T, request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(ctx: T, request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(ctx: T, request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(ctx: T, request: UUID): Promise<ValidInstallLocationsResponse>;
}
export declare enum AppVersionMethod {
    Create = "Create",
    Get = "Get",
    GetBySlugAndVersionNumber = "GetBySlugAndVersionNumber",
    Update = "Update",
    GetValidInstallLocations = "GetValidInstallLocations"
}
export declare const AppVersionMethodList: AppVersionMethod[];
export declare function createAppVersionServer<T extends TwirpContext = TwirpContext>(service: AppVersionTwirp<T>): TwirpServer<AppVersionTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface InstallationsTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(ctx: T, request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(ctx: T, request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(ctx: T, request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(ctx: T, request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(ctx: T, request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(ctx: T, request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(ctx: T, request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(ctx: T, request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    Update(ctx: T, request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(ctx: T, request: UUID): Promise<Empty>;
}
export declare enum InstallationsMethod {
    Create = "Create",
    GetByUUID = "GetByUUID",
    GetByAppNameAndInstallLocation = "GetByAppNameAndInstallLocation",
    GetAllWithInstallLocation = "GetAllWithInstallLocation",
    GetAllWithInstaller = "GetAllWithInstaller",
    GetAllWithVersionUUID = "GetAllWithVersionUUID",
    GetAllWithApp = "GetAllWithApp",
    GetInstallationHistory = "GetInstallationHistory",
    Upgrade = "Upgrade",
    Update = "Update",
    Remove = "Remove"
}
export declare const InstallationsMethodList: InstallationsMethod[];
export declare function createInstallationsServer<T extends TwirpContext = TwirpContext>(service: InstallationsTwirp<T>): TwirpServer<InstallationsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface FeedbackTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: CreateFeedbackRequest): Promise<Empty>;
}
export declare enum FeedbackMethod {
    Create = "Create"
}
export declare const FeedbackMethodList: FeedbackMethod[];
export declare function createFeedbackServer<T extends TwirpContext = TwirpContext>(service: FeedbackTwirp<T>): TwirpServer<FeedbackTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface EventsTwirp<T extends TwirpContext = TwirpContext> {
    SendEvent(ctx: T, request: Value): Promise<Empty>;
}
export declare enum EventsMethod {
    SendEvent = "SendEvent"
}
export declare const EventsMethodList: EventsMethod[];
export declare function createEventsServer<T extends TwirpContext = TwirpContext>(service: EventsTwirp<T>): TwirpServer<EventsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface DevPortalInstallationSettingsTwirp<T extends TwirpContext = TwirpContext> {
    GetForm(ctx: T, request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(ctx: T, request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(ctx: T, request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(ctx: T, request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare enum DevPortalInstallationSettingsMethod {
    GetForm = "GetForm",
    ValidateForm = "ValidateForm",
    GetSettings = "GetSettings",
    UpdateSettings = "UpdateSettings"
}
export declare const DevPortalInstallationSettingsMethodList: DevPortalInstallationSettingsMethod[];
export declare function createDevPortalInstallationSettingsServer<T extends TwirpContext = TwirpContext>(service: DevPortalInstallationSettingsTwirp<T>): TwirpServer<DevPortalInstallationSettingsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
//# sourceMappingURL=dev_portal.twirp.d.ts.map