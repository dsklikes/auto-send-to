import { SubmissionsRequest, SubmissionsResponse, SubmissionUpdateRequest, SubmissionUpdateResponse } from './waitlist_admin.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { StringValue } from '../../../google/protobuf/wrappers.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface WaitlistAdminClient {
    GetSubmissions(request: SubmissionsRequest): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest): Promise<SubmissionUpdateResponse>;
    ExportAsCSV(request: Empty): Promise<StringValue>;
}
export declare class WaitlistAdminClientJSON implements WaitlistAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetSubmissions(request: SubmissionsRequest): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest): Promise<SubmissionUpdateResponse>;
    ExportAsCSV(request: Empty): Promise<StringValue>;
}
export declare class WaitlistAdminClientProtobuf implements WaitlistAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetSubmissions(request: SubmissionsRequest): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest): Promise<SubmissionUpdateResponse>;
    ExportAsCSV(request: Empty): Promise<StringValue>;
}
export {};
//# sourceMappingURL=waitlist_admin.twirp-client.d.ts.map