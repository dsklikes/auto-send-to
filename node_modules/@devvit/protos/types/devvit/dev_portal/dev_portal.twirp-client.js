import { AppCreationRequest, AppSearchRequest, AppSearchResponse, GetAppBySlugRequest, FullAppInfo, GetAllWithOwnerRequest, GetPopularAppsRequest, AppUpdateRequest, UnpublishAppRequest, AppExistsRequest, AppExistsResponse, AppAccountExistsRequest, AppAccountExistsResponse, } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { UUID } from '../uuid.js';
import { GetAllWithInstallLocationRequest, GetAllWithInstallerRequest, InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, MultipleInstallationsResponse, GetAllWithAppResponse, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationUpgradeRequest, InstallationUpdateRequest, } from './installation/installation.js';
import { Empty } from '../../google/protobuf/empty.js';
import { AppVersionCreationRequest, FullAppVersionInfo, AppSlugAndVersion, AppVersionUpdateRequest, ValidInstallLocationsResponse, } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { Value } from '../../google/protobuf/struct.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse, } from './installation_settings/installation_settings.js';
export class AppClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.Search.bind(this);
        this.GetBySlug.bind(this);
        this.GetByUUID.bind(this);
        this.GetAllWithLocation.bind(this);
        this.GetAllWithInstaller.bind(this);
        this.GetAllWithOwner.bind(this);
        this.GetPopularApps.bind(this);
        this.Update.bind(this);
        this.Unpublish.bind(this);
        this.Exists.bind(this);
        this.AppAccountExists.bind(this);
    }
    Create(request) {
        const data = AppCreationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'Create', 'application/json', data);
        return promise.then((data) => AppInfo.fromJSON(data));
    }
    Search(request) {
        const data = AppSearchRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'Search', 'application/json', data);
        return promise.then((data) => AppSearchResponse.fromJSON(data));
    }
    GetBySlug(request) {
        const data = GetAppBySlugRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetBySlug', 'application/json', data);
        return promise.then((data) => FullAppInfo.fromJSON(data));
    }
    GetByUUID(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetByUUID', 'application/json', data);
        return promise.then((data) => FullAppInfo.fromJSON(data));
    }
    GetAllWithLocation(request) {
        const data = GetAllWithInstallLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithLocation', 'application/json', data);
        return promise.then((data) => MultipleAppInfos.fromJSON(data));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithInstaller', 'application/json', data);
        return promise.then((data) => MultipleAppInfos.fromJSON(data));
    }
    GetAllWithOwner(request) {
        const data = GetAllWithOwnerRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithOwner', 'application/json', data);
        return promise.then((data) => MultipleAppInfos.fromJSON(data));
    }
    GetPopularApps(request) {
        const data = GetPopularAppsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetPopularApps', 'application/json', data);
        return promise.then((data) => MultipleAppInfos.fromJSON(data));
    }
    Update(request) {
        const data = AppUpdateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'Update', 'application/json', data);
        return promise.then((data) => FullAppInfo.fromJSON(data));
    }
    Unpublish(request) {
        const data = UnpublishAppRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'Unpublish', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Exists(request) {
        const data = AppExistsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'Exists', 'application/json', data);
        return promise.then((data) => AppExistsResponse.fromJSON(data));
    }
    AppAccountExists(request) {
        const data = AppAccountExistsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.App', 'AppAccountExists', 'application/json', data);
        return promise.then((data) => AppAccountExistsResponse.fromJSON(data));
    }
}
export class AppClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.Search.bind(this);
        this.GetBySlug.bind(this);
        this.GetByUUID.bind(this);
        this.GetAllWithLocation.bind(this);
        this.GetAllWithInstaller.bind(this);
        this.GetAllWithOwner.bind(this);
        this.GetPopularApps.bind(this);
        this.Update.bind(this);
        this.Unpublish.bind(this);
        this.Exists.bind(this);
        this.AppAccountExists.bind(this);
    }
    Create(request) {
        const data = AppCreationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'Create', 'application/protobuf', data);
        return promise.then((data) => AppInfo.decode(data));
    }
    Search(request) {
        const data = AppSearchRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'Search', 'application/protobuf', data);
        return promise.then((data) => AppSearchResponse.decode(data));
    }
    GetBySlug(request) {
        const data = GetAppBySlugRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetBySlug', 'application/protobuf', data);
        return promise.then((data) => FullAppInfo.decode(data));
    }
    GetByUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetByUUID', 'application/protobuf', data);
        return promise.then((data) => FullAppInfo.decode(data));
    }
    GetAllWithLocation(request) {
        const data = GetAllWithInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithLocation', 'application/protobuf', data);
        return promise.then((data) => MultipleAppInfos.decode(data));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithInstaller', 'application/protobuf', data);
        return promise.then((data) => MultipleAppInfos.decode(data));
    }
    GetAllWithOwner(request) {
        const data = GetAllWithOwnerRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetAllWithOwner', 'application/protobuf', data);
        return promise.then((data) => MultipleAppInfos.decode(data));
    }
    GetPopularApps(request) {
        const data = GetPopularAppsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'GetPopularApps', 'application/protobuf', data);
        return promise.then((data) => MultipleAppInfos.decode(data));
    }
    Update(request) {
        const data = AppUpdateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'Update', 'application/protobuf', data);
        return promise.then((data) => FullAppInfo.decode(data));
    }
    Unpublish(request) {
        const data = UnpublishAppRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'Unpublish', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Exists(request) {
        const data = AppExistsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'Exists', 'application/protobuf', data);
        return promise.then((data) => AppExistsResponse.decode(data));
    }
    AppAccountExists(request) {
        const data = AppAccountExistsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.App', 'AppAccountExists', 'application/protobuf', data);
        return promise.then((data) => AppAccountExistsResponse.decode(data));
    }
}
export class AppVersionClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.Get.bind(this);
        this.GetBySlugAndVersionNumber.bind(this);
        this.Update.bind(this);
        this.GetValidInstallLocations.bind(this);
    }
    Create(request) {
        const data = AppVersionCreationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Create', 'application/json', data);
        return promise.then((data) => AppVersionInfo.fromJSON(data));
    }
    Get(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Get', 'application/json', data);
        return promise.then((data) => FullAppVersionInfo.fromJSON(data));
    }
    GetBySlugAndVersionNumber(request) {
        const data = AppSlugAndVersion.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'GetBySlugAndVersionNumber', 'application/json', data);
        return promise.then((data) => FullAppVersionInfo.fromJSON(data));
    }
    Update(request) {
        const data = AppVersionUpdateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Update', 'application/json', data);
        return promise.then((data) => FullAppVersionInfo.fromJSON(data));
    }
    GetValidInstallLocations(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'GetValidInstallLocations', 'application/json', data);
        return promise.then((data) => ValidInstallLocationsResponse.fromJSON(data));
    }
}
export class AppVersionClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.Get.bind(this);
        this.GetBySlugAndVersionNumber.bind(this);
        this.Update.bind(this);
        this.GetValidInstallLocations.bind(this);
    }
    Create(request) {
        const data = AppVersionCreationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Create', 'application/protobuf', data);
        return promise.then((data) => AppVersionInfo.decode(data));
    }
    Get(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Get', 'application/protobuf', data);
        return promise.then((data) => FullAppVersionInfo.decode(data));
    }
    GetBySlugAndVersionNumber(request) {
        const data = AppSlugAndVersion.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'GetBySlugAndVersionNumber', 'application/protobuf', data);
        return promise.then((data) => FullAppVersionInfo.decode(data));
    }
    Update(request) {
        const data = AppVersionUpdateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'Update', 'application/protobuf', data);
        return promise.then((data) => FullAppVersionInfo.decode(data));
    }
    GetValidInstallLocations(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.AppVersion', 'GetValidInstallLocations', 'application/protobuf', data);
        return promise.then((data) => ValidInstallLocationsResponse.decode(data));
    }
}
export class InstallationsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.GetByUUID.bind(this);
        this.GetByAppNameAndInstallLocation.bind(this);
        this.GetAllWithInstallLocation.bind(this);
        this.GetAllWithInstaller.bind(this);
        this.GetAllWithVersionUUID.bind(this);
        this.GetAllWithApp.bind(this);
        this.GetInstallationHistory.bind(this);
        this.Upgrade.bind(this);
        this.Update.bind(this);
        this.Remove.bind(this);
    }
    Create(request) {
        const data = InstallationCreationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Create', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    GetByUUID(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetByUUID', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    GetByAppNameAndInstallLocation(request) {
        const data = GetByAppNameAndInstallLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetByAppNameAndInstallLocation', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    GetAllWithInstallLocation(request) {
        const data = GetAllWithInstallLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithInstallLocation', 'application/json', data);
        return promise.then((data) => MultipleInstallationsResponse.fromJSON(data));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithInstaller', 'application/json', data);
        return promise.then((data) => MultipleInstallationsResponse.fromJSON(data));
    }
    GetAllWithVersionUUID(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithVersionUUID', 'application/json', data);
        return promise.then((data) => MultipleInstallationsResponse.fromJSON(data));
    }
    GetAllWithApp(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithApp', 'application/json', data);
        return promise.then((data) => GetAllWithAppResponse.fromJSON(data));
    }
    GetInstallationHistory(request) {
        const data = GetInstallationHistoryRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetInstallationHistory', 'application/json', data);
        return promise.then((data) => GetInstallationHistoryResponse.fromJSON(data));
    }
    Upgrade(request) {
        const data = InstallationUpgradeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Upgrade', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    Update(request) {
        const data = InstallationUpdateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Update', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    Remove(request) {
        const data = UUID.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Remove', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class InstallationsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.GetByUUID.bind(this);
        this.GetByAppNameAndInstallLocation.bind(this);
        this.GetAllWithInstallLocation.bind(this);
        this.GetAllWithInstaller.bind(this);
        this.GetAllWithVersionUUID.bind(this);
        this.GetAllWithApp.bind(this);
        this.GetInstallationHistory.bind(this);
        this.Upgrade.bind(this);
        this.Update.bind(this);
        this.Remove.bind(this);
    }
    Create(request) {
        const data = InstallationCreationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Create', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    GetByUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetByUUID', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    GetByAppNameAndInstallLocation(request) {
        const data = GetByAppNameAndInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetByAppNameAndInstallLocation', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    GetAllWithInstallLocation(request) {
        const data = GetAllWithInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithInstallLocation', 'application/protobuf', data);
        return promise.then((data) => MultipleInstallationsResponse.decode(data));
    }
    GetAllWithInstaller(request) {
        const data = GetAllWithInstallerRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithInstaller', 'application/protobuf', data);
        return promise.then((data) => MultipleInstallationsResponse.decode(data));
    }
    GetAllWithVersionUUID(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithVersionUUID', 'application/protobuf', data);
        return promise.then((data) => MultipleInstallationsResponse.decode(data));
    }
    GetAllWithApp(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetAllWithApp', 'application/protobuf', data);
        return promise.then((data) => GetAllWithAppResponse.decode(data));
    }
    GetInstallationHistory(request) {
        const data = GetInstallationHistoryRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'GetInstallationHistory', 'application/protobuf', data);
        return promise.then((data) => GetInstallationHistoryResponse.decode(data));
    }
    Upgrade(request) {
        const data = InstallationUpgradeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Upgrade', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    Update(request) {
        const data = InstallationUpdateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Update', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    Remove(request) {
        const data = UUID.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Installations', 'Remove', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
export class FeedbackClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
    }
    Create(request) {
        const data = CreateFeedbackRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Feedback', 'Create', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class FeedbackClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
    }
    Create(request) {
        const data = CreateFeedbackRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Feedback', 'Create', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
export class EventsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.SendEvent.bind(this);
    }
    SendEvent(request) {
        const data = Value.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.Events', 'SendEvent', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class EventsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.SendEvent.bind(this);
    }
    SendEvent(request) {
        const data = Value.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.Events', 'SendEvent', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
export class DevPortalInstallationSettingsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetForm.bind(this);
        this.ValidateForm.bind(this);
        this.GetSettings.bind(this);
        this.UpdateSettings.bind(this);
    }
    GetForm(request) {
        const data = GetInstallationSettingsFormRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'GetForm', 'application/json', data);
        return promise.then((data) => GetInstallationSettingsFormResponse.fromJSON(data));
    }
    ValidateForm(request) {
        const data = ValidateInstallationSettingsFormRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'ValidateForm', 'application/json', data);
        return promise.then((data) => ValidateInstallationSettingsFormResponse.fromJSON(data));
    }
    GetSettings(request) {
        const data = GetInstallationSettingsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'GetSettings', 'application/json', data);
        return promise.then((data) => GetInstallationSettingsResponse.fromJSON(data));
    }
    UpdateSettings(request) {
        const data = UpdateInstallationSettingsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'UpdateSettings', 'application/json', data);
        return promise.then((data) => UpdateInstallationSettingsResponse.fromJSON(data));
    }
}
export class DevPortalInstallationSettingsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetForm.bind(this);
        this.ValidateForm.bind(this);
        this.GetSettings.bind(this);
        this.UpdateSettings.bind(this);
    }
    GetForm(request) {
        const data = GetInstallationSettingsFormRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'GetForm', 'application/protobuf', data);
        return promise.then((data) => GetInstallationSettingsFormResponse.decode(data));
    }
    ValidateForm(request) {
        const data = ValidateInstallationSettingsFormRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'ValidateForm', 'application/protobuf', data);
        return promise.then((data) => ValidateInstallationSettingsFormResponse.decode(data));
    }
    GetSettings(request) {
        const data = GetInstallationSettingsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'GetSettings', 'application/protobuf', data);
        return promise.then((data) => GetInstallationSettingsResponse.decode(data));
    }
    UpdateSettings(request) {
        const data = UpdateInstallationSettingsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.DevPortalInstallationSettings', 'UpdateSettings', 'application/protobuf', data);
        return promise.then((data) => UpdateInstallationSettingsResponse.decode(data));
    }
}
