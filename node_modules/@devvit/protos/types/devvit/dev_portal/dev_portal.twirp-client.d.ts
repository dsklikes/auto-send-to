import { AppCreationRequest, AppSearchRequest, AppSearchResponse, GetAppBySlugRequest, FullAppInfo, GetAllWithOwnerRequest, GetPopularAppsRequest, AppUpdateRequest, UnpublishAppRequest, AppExistsRequest, AppExistsResponse, AppAccountExistsRequest, AppAccountExistsResponse } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { UUID } from '../uuid.js';
import { GetAllWithInstallLocationRequest, GetAllWithInstallerRequest, InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, MultipleInstallationsResponse, GetAllWithAppResponse, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationUpgradeRequest, InstallationUpdateRequest } from './installation/installation.js';
import { Empty } from '../../google/protobuf/empty.js';
import { AppVersionCreationRequest, FullAppVersionInfo, AppSlugAndVersion, AppVersionUpdateRequest, ValidInstallLocationsResponse } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { Value } from '../../google/protobuf/struct.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse } from './installation_settings/installation_settings.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface AppClient {
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
}
export declare class AppClientJSON implements AppClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
}
export declare class AppClientProtobuf implements AppClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface AppVersionClient {
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: UUID): Promise<ValidInstallLocationsResponse>;
}
export declare class AppVersionClientJSON implements AppVersionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: UUID): Promise<ValidInstallLocationsResponse>;
}
export declare class AppVersionClientProtobuf implements AppVersionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: UUID): Promise<ValidInstallLocationsResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface InstallationsClient {
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
export declare class InstallationsClientJSON implements InstallationsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
export declare class InstallationsClientProtobuf implements InstallationsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface FeedbackClient {
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
export declare class FeedbackClientJSON implements FeedbackClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
export declare class FeedbackClientProtobuf implements FeedbackClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface EventsClient {
    SendEvent(request: Value): Promise<Empty>;
}
export declare class EventsClientJSON implements EventsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    SendEvent(request: Value): Promise<Empty>;
}
export declare class EventsClientProtobuf implements EventsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    SendEvent(request: Value): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DevPortalInstallationSettingsClient {
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare class DevPortalInstallationSettingsClientJSON implements DevPortalInstallationSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare class DevPortalInstallationSettingsClientProtobuf implements DevPortalInstallationSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export {};
//# sourceMappingURL=dev_portal.twirp-client.d.ts.map