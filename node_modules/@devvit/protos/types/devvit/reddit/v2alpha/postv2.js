/**
 * #postv2.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { LinkFlairV2, UserFlairV2 } from './flair.js';
export var CrowdControlLevel;
(function (CrowdControlLevel) {
    CrowdControlLevel[CrowdControlLevel["OFF"] = 0] = "OFF";
    CrowdControlLevel[CrowdControlLevel["LENIENT"] = 1] = "LENIENT";
    CrowdControlLevel[CrowdControlLevel["MEDIUM"] = 2] = "MEDIUM";
    CrowdControlLevel[CrowdControlLevel["STRICT"] = 3] = "STRICT";
    CrowdControlLevel[CrowdControlLevel["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CrowdControlLevel || (CrowdControlLevel = {}));
export function crowdControlLevelFromJSON(object) {
    switch (object) {
        case 0:
        case "OFF":
            return CrowdControlLevel.OFF;
        case 1:
        case "LENIENT":
            return CrowdControlLevel.LENIENT;
        case 2:
        case "MEDIUM":
            return CrowdControlLevel.MEDIUM;
        case 3:
        case "STRICT":
            return CrowdControlLevel.STRICT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CrowdControlLevel.UNRECOGNIZED;
    }
}
export function crowdControlLevelToJSON(object) {
    switch (object) {
        case CrowdControlLevel.OFF:
            return 0;
        case CrowdControlLevel.LENIENT:
            return 1;
        case CrowdControlLevel.MEDIUM:
            return 2;
        case CrowdControlLevel.STRICT:
            return 3;
        case CrowdControlLevel.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var DistinguishType;
(function (DistinguishType) {
    DistinguishType[DistinguishType["NULL_VALUE"] = 0] = "NULL_VALUE";
    DistinguishType[DistinguishType["ADMIN"] = 1] = "ADMIN";
    DistinguishType[DistinguishType["GOLD"] = 2] = "GOLD";
    DistinguishType[DistinguishType["GOLD_AUTO"] = 3] = "GOLD_AUTO";
    DistinguishType[DistinguishType["YES"] = 4] = "YES";
    DistinguishType[DistinguishType["SPECIAL"] = 5] = "SPECIAL";
    DistinguishType[DistinguishType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DistinguishType || (DistinguishType = {}));
export function distinguishTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NULL_VALUE":
            return DistinguishType.NULL_VALUE;
        case 1:
        case "ADMIN":
            return DistinguishType.ADMIN;
        case 2:
        case "GOLD":
            return DistinguishType.GOLD;
        case 3:
        case "GOLD_AUTO":
            return DistinguishType.GOLD_AUTO;
        case 4:
        case "YES":
            return DistinguishType.YES;
        case 5:
        case "SPECIAL":
            return DistinguishType.SPECIAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DistinguishType.UNRECOGNIZED;
    }
}
export function distinguishTypeToJSON(object) {
    switch (object) {
        case DistinguishType.NULL_VALUE:
            return 0;
        case DistinguishType.ADMIN:
            return 1;
        case DistinguishType.GOLD:
            return 2;
        case DistinguishType.GOLD_AUTO:
            return 3;
        case DistinguishType.YES:
            return 4;
        case DistinguishType.SPECIAL:
            return 5;
        case DistinguishType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBasePostV2() {
    return {
        id: "",
        title: "",
        selftext: "",
        nsfw: false,
        authorId: "",
        crowdControlLevel: 0,
        numReports: 0,
        isGallery: false,
        isMeta: false,
        createdAt: 0,
        isApproved: false,
        isArchived: false,
        distinguished: 0,
        ignoreReports: false,
        isSelf: false,
        isVideo: false,
        isLocked: false,
        isSpoiler: false,
        subredditId: "",
        upvotes: 0,
        downvotes: 0,
        url: "",
        isSticky: false,
        linkFlair: undefined,
        authorFlair: undefined,
        spam: false,
        deleted: false,
    };
}
export const PostV2 = {
    $type: "devvit.reddit.v2alpha.PostV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.selftext !== "") {
            writer.uint32(26).string(message.selftext);
        }
        if (message.nsfw === true) {
            writer.uint32(32).bool(message.nsfw);
        }
        if (message.authorId !== "") {
            writer.uint32(42).string(message.authorId);
        }
        if (message.crowdControlLevel !== 0) {
            writer.uint32(48).int32(message.crowdControlLevel);
        }
        if (message.numReports !== 0) {
            writer.uint32(56).int32(message.numReports);
        }
        if (message.isGallery === true) {
            writer.uint32(64).bool(message.isGallery);
        }
        if (message.isMeta === true) {
            writer.uint32(72).bool(message.isMeta);
        }
        if (message.createdAt !== 0) {
            writer.uint32(80).int64(message.createdAt);
        }
        if (message.isApproved === true) {
            writer.uint32(88).bool(message.isApproved);
        }
        if (message.isArchived === true) {
            writer.uint32(96).bool(message.isArchived);
        }
        if (message.distinguished !== 0) {
            writer.uint32(104).int32(message.distinguished);
        }
        if (message.ignoreReports === true) {
            writer.uint32(112).bool(message.ignoreReports);
        }
        if (message.isSelf === true) {
            writer.uint32(120).bool(message.isSelf);
        }
        if (message.isVideo === true) {
            writer.uint32(128).bool(message.isVideo);
        }
        if (message.isLocked === true) {
            writer.uint32(136).bool(message.isLocked);
        }
        if (message.isSpoiler === true) {
            writer.uint32(144).bool(message.isSpoiler);
        }
        if (message.subredditId !== "") {
            writer.uint32(154).string(message.subredditId);
        }
        if (message.upvotes !== 0) {
            writer.uint32(160).int32(message.upvotes);
        }
        if (message.downvotes !== 0) {
            writer.uint32(168).int32(message.downvotes);
        }
        if (message.url !== "") {
            writer.uint32(178).string(message.url);
        }
        if (message.isSticky === true) {
            writer.uint32(184).bool(message.isSticky);
        }
        if (message.linkFlair !== undefined) {
            LinkFlairV2.encode(message.linkFlair, writer.uint32(194).fork()).ldelim();
        }
        if (message.authorFlair !== undefined) {
            UserFlairV2.encode(message.authorFlair, writer.uint32(202).fork()).ldelim();
        }
        if (message.spam === true) {
            writer.uint32(208).bool(message.spam);
        }
        if (message.deleted === true) {
            writer.uint32(216).bool(message.deleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.selftext = reader.string();
                    break;
                case 4:
                    message.nsfw = reader.bool();
                    break;
                case 5:
                    message.authorId = reader.string();
                    break;
                case 6:
                    message.crowdControlLevel = reader.int32();
                    break;
                case 7:
                    message.numReports = reader.int32();
                    break;
                case 8:
                    message.isGallery = reader.bool();
                    break;
                case 9:
                    message.isMeta = reader.bool();
                    break;
                case 10:
                    message.createdAt = longToNumber(reader.int64());
                    break;
                case 11:
                    message.isApproved = reader.bool();
                    break;
                case 12:
                    message.isArchived = reader.bool();
                    break;
                case 13:
                    message.distinguished = reader.int32();
                    break;
                case 14:
                    message.ignoreReports = reader.bool();
                    break;
                case 15:
                    message.isSelf = reader.bool();
                    break;
                case 16:
                    message.isVideo = reader.bool();
                    break;
                case 17:
                    message.isLocked = reader.bool();
                    break;
                case 18:
                    message.isSpoiler = reader.bool();
                    break;
                case 19:
                    message.subredditId = reader.string();
                    break;
                case 20:
                    message.upvotes = reader.int32();
                    break;
                case 21:
                    message.downvotes = reader.int32();
                    break;
                case 22:
                    message.url = reader.string();
                    break;
                case 23:
                    message.isSticky = reader.bool();
                    break;
                case 24:
                    message.linkFlair = LinkFlairV2.decode(reader, reader.uint32());
                    break;
                case 25:
                    message.authorFlair = UserFlairV2.decode(reader, reader.uint32());
                    break;
                case 26:
                    message.spam = reader.bool();
                    break;
                case 27:
                    message.deleted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            title: isSet(object.title) ? String(object.title) : "",
            selftext: isSet(object.selftext) ? String(object.selftext) : "",
            nsfw: isSet(object.nsfw) ? Boolean(object.nsfw) : false,
            authorId: isSet(object.authorId) ? String(object.authorId) : "",
            crowdControlLevel: isSet(object.crowdControlLevel) ? crowdControlLevelFromJSON(object.crowdControlLevel) : 0,
            numReports: isSet(object.numReports) ? Number(object.numReports) : 0,
            isGallery: isSet(object.isGallery) ? Boolean(object.isGallery) : false,
            isMeta: isSet(object.isMeta) ? Boolean(object.isMeta) : false,
            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
            isApproved: isSet(object.isApproved) ? Boolean(object.isApproved) : false,
            isArchived: isSet(object.isArchived) ? Boolean(object.isArchived) : false,
            distinguished: isSet(object.distinguished) ? distinguishTypeFromJSON(object.distinguished) : 0,
            ignoreReports: isSet(object.ignoreReports) ? Boolean(object.ignoreReports) : false,
            isSelf: isSet(object.isSelf) ? Boolean(object.isSelf) : false,
            isVideo: isSet(object.isVideo) ? Boolean(object.isVideo) : false,
            isLocked: isSet(object.isLocked) ? Boolean(object.isLocked) : false,
            isSpoiler: isSet(object.isSpoiler) ? Boolean(object.isSpoiler) : false,
            subredditId: isSet(object.subredditId) ? String(object.subredditId) : "",
            upvotes: isSet(object.upvotes) ? Number(object.upvotes) : 0,
            downvotes: isSet(object.downvotes) ? Number(object.downvotes) : 0,
            url: isSet(object.url) ? String(object.url) : "",
            isSticky: isSet(object.isSticky) ? Boolean(object.isSticky) : false,
            linkFlair: isSet(object.linkFlair) ? LinkFlairV2.fromJSON(object.linkFlair) : undefined,
            authorFlair: isSet(object.authorFlair) ? UserFlairV2.fromJSON(object.authorFlair) : undefined,
            spam: isSet(object.spam) ? Boolean(object.spam) : false,
            deleted: isSet(object.deleted) ? Boolean(object.deleted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.title !== undefined && (obj.title = message.title);
        message.selftext !== undefined && (obj.selftext = message.selftext);
        message.nsfw !== undefined && (obj.nsfw = message.nsfw);
        message.authorId !== undefined && (obj.authorId = message.authorId);
        message.crowdControlLevel !== undefined &&
            (obj.crowdControlLevel = crowdControlLevelToJSON(message.crowdControlLevel));
        message.numReports !== undefined && (obj.numReports = Math.round(message.numReports));
        message.isGallery !== undefined && (obj.isGallery = message.isGallery);
        message.isMeta !== undefined && (obj.isMeta = message.isMeta);
        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
        message.isApproved !== undefined && (obj.isApproved = message.isApproved);
        message.isArchived !== undefined && (obj.isArchived = message.isArchived);
        message.distinguished !== undefined && (obj.distinguished = distinguishTypeToJSON(message.distinguished));
        message.ignoreReports !== undefined && (obj.ignoreReports = message.ignoreReports);
        message.isSelf !== undefined && (obj.isSelf = message.isSelf);
        message.isVideo !== undefined && (obj.isVideo = message.isVideo);
        message.isLocked !== undefined && (obj.isLocked = message.isLocked);
        message.isSpoiler !== undefined && (obj.isSpoiler = message.isSpoiler);
        message.subredditId !== undefined && (obj.subredditId = message.subredditId);
        message.upvotes !== undefined && (obj.upvotes = Math.round(message.upvotes));
        message.downvotes !== undefined && (obj.downvotes = Math.round(message.downvotes));
        message.url !== undefined && (obj.url = message.url);
        message.isSticky !== undefined && (obj.isSticky = message.isSticky);
        message.linkFlair !== undefined &&
            (obj.linkFlair = message.linkFlair ? LinkFlairV2.toJSON(message.linkFlair) : undefined);
        message.authorFlair !== undefined &&
            (obj.authorFlair = message.authorFlair ? UserFlairV2.toJSON(message.authorFlair) : undefined);
        message.spam !== undefined && (obj.spam = message.spam);
        message.deleted !== undefined && (obj.deleted = message.deleted);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePostV2();
        message.id = object.id ?? "";
        message.title = object.title ?? "";
        message.selftext = object.selftext ?? "";
        message.nsfw = object.nsfw ?? false;
        message.authorId = object.authorId ?? "";
        message.crowdControlLevel = object.crowdControlLevel ?? 0;
        message.numReports = object.numReports ?? 0;
        message.isGallery = object.isGallery ?? false;
        message.isMeta = object.isMeta ?? false;
        message.createdAt = object.createdAt ?? 0;
        message.isApproved = object.isApproved ?? false;
        message.isArchived = object.isArchived ?? false;
        message.distinguished = object.distinguished ?? 0;
        message.ignoreReports = object.ignoreReports ?? false;
        message.isSelf = object.isSelf ?? false;
        message.isVideo = object.isVideo ?? false;
        message.isLocked = object.isLocked ?? false;
        message.isSpoiler = object.isSpoiler ?? false;
        message.subredditId = object.subredditId ?? "";
        message.upvotes = object.upvotes ?? 0;
        message.downvotes = object.downvotes ?? 0;
        message.url = object.url ?? "";
        message.isSticky = object.isSticky ?? false;
        message.linkFlair = (object.linkFlair !== undefined && object.linkFlair !== null)
            ? LinkFlairV2.fromPartial(object.linkFlair)
            : undefined;
        message.authorFlair = (object.authorFlair !== undefined && object.authorFlair !== null)
            ? UserFlairV2.fromPartial(object.authorFlair)
            : undefined;
        message.spam = object.spam ?? false;
        message.deleted = object.deleted ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.PostV2", PostV2);
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
