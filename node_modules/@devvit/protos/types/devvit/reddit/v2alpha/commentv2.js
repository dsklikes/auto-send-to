/**
 * #commentv2.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseCommentV2() {
    return {
        id: "",
        parentId: "",
        body: "",
        author: "",
        numReports: 0,
        collapsedBecauseCrowdControl: false,
        spam: false,
        deleted: false,
    };
}
export const CommentV2 = {
    $type: "devvit.reddit.v2alpha.CommentV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.parentId !== "") {
            writer.uint32(18).string(message.parentId);
        }
        if (message.body !== "") {
            writer.uint32(26).string(message.body);
        }
        if (message.author !== "") {
            writer.uint32(34).string(message.author);
        }
        if (message.numReports !== 0) {
            writer.uint32(40).int32(message.numReports);
        }
        if (message.collapsedBecauseCrowdControl === true) {
            writer.uint32(48).bool(message.collapsedBecauseCrowdControl);
        }
        if (message.spam === true) {
            writer.uint32(56).bool(message.spam);
        }
        if (message.deleted === true) {
            writer.uint32(64).bool(message.deleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.parentId = reader.string();
                    break;
                case 3:
                    message.body = reader.string();
                    break;
                case 4:
                    message.author = reader.string();
                    break;
                case 5:
                    message.numReports = reader.int32();
                    break;
                case 6:
                    message.collapsedBecauseCrowdControl = reader.bool();
                    break;
                case 7:
                    message.spam = reader.bool();
                    break;
                case 8:
                    message.deleted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            parentId: isSet(object.parentId) ? String(object.parentId) : "",
            body: isSet(object.body) ? String(object.body) : "",
            author: isSet(object.author) ? String(object.author) : "",
            numReports: isSet(object.numReports) ? Number(object.numReports) : 0,
            collapsedBecauseCrowdControl: isSet(object.collapsedBecauseCrowdControl)
                ? Boolean(object.collapsedBecauseCrowdControl)
                : false,
            spam: isSet(object.spam) ? Boolean(object.spam) : false,
            deleted: isSet(object.deleted) ? Boolean(object.deleted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.parentId !== undefined && (obj.parentId = message.parentId);
        message.body !== undefined && (obj.body = message.body);
        message.author !== undefined && (obj.author = message.author);
        message.numReports !== undefined && (obj.numReports = Math.round(message.numReports));
        message.collapsedBecauseCrowdControl !== undefined &&
            (obj.collapsedBecauseCrowdControl = message.collapsedBecauseCrowdControl);
        message.spam !== undefined && (obj.spam = message.spam);
        message.deleted !== undefined && (obj.deleted = message.deleted);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommentV2();
        message.id = object.id ?? "";
        message.parentId = object.parentId ?? "";
        message.body = object.body ?? "";
        message.author = object.author ?? "";
        message.numReports = object.numReports ?? 0;
        message.collapsedBecauseCrowdControl = object.collapsedBecauseCrowdControl ?? false;
        message.spam = object.spam ?? false;
        message.deleted = object.deleted ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.CommentV2", CommentV2);
function isSet(value) {
    return value !== null && value !== undefined;
}
