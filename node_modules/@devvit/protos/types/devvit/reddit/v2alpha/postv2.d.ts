/**
 * #postv2.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { LinkFlairV2, UserFlairV2 } from './flair.js';
export declare enum CrowdControlLevel {
    OFF = 0,
    LENIENT = 1,
    MEDIUM = 2,
    STRICT = 3,
    UNRECOGNIZED = -1
}
export declare function crowdControlLevelFromJSON(object: any): CrowdControlLevel;
export declare function crowdControlLevelToJSON(object: CrowdControlLevel): number;
export declare enum DistinguishType {
    NULL_VALUE = 0,
    ADMIN = 1,
    GOLD = 2,
    GOLD_AUTO = 3,
    YES = 4,
    SPECIAL = 5,
    UNRECOGNIZED = -1
}
export declare function distinguishTypeFromJSON(object: any): DistinguishType;
export declare function distinguishTypeToJSON(object: DistinguishType): number;
export interface PostV2 {
    id: string;
    title: string;
    /** rename to text? */
    selftext: string;
    nsfw: boolean;
    authorId: string;
    crowdControlLevel: CrowdControlLevel;
    numReports: number;
    isGallery: boolean;
    isMeta: boolean;
    createdAt: number;
    isApproved: boolean;
    isArchived: boolean;
    distinguished: DistinguishType;
    ignoreReports: boolean;
    isSelf: boolean;
    isVideo: boolean;
    isLocked: boolean;
    isSpoiler: boolean;
    subredditId: string;
    upvotes: number;
    downvotes: number;
    url: string;
    isSticky: boolean;
    linkFlair?: LinkFlairV2;
    authorFlair?: UserFlairV2;
    spam: boolean;
    deleted: boolean;
}
export declare const PostV2: {
    $type: "devvit.reddit.v2alpha.PostV2";
    encode(message: PostV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostV2;
    fromJSON(object: any): PostV2;
    toJSON(message: PostV2): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        title?: string | undefined;
        selftext?: string | undefined;
        nsfw?: boolean | undefined;
        authorId?: string | undefined;
        crowdControlLevel?: CrowdControlLevel | undefined;
        numReports?: number | undefined;
        isGallery?: boolean | undefined;
        isMeta?: boolean | undefined;
        createdAt?: number | undefined;
        isApproved?: boolean | undefined;
        isArchived?: boolean | undefined;
        distinguished?: DistinguishType | undefined;
        ignoreReports?: boolean | undefined;
        isSelf?: boolean | undefined;
        isVideo?: boolean | undefined;
        isLocked?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        subredditId?: string | undefined;
        upvotes?: number | undefined;
        downvotes?: number | undefined;
        url?: string | undefined;
        isSticky?: boolean | undefined;
        linkFlair?: {
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } | undefined;
        authorFlair?: {
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } | undefined;
        spam?: boolean | undefined;
        deleted?: boolean | undefined;
    } & {
        id?: string | undefined;
        title?: string | undefined;
        selftext?: string | undefined;
        nsfw?: boolean | undefined;
        authorId?: string | undefined;
        crowdControlLevel?: CrowdControlLevel | undefined;
        numReports?: number | undefined;
        isGallery?: boolean | undefined;
        isMeta?: boolean | undefined;
        createdAt?: number | undefined;
        isApproved?: boolean | undefined;
        isArchived?: boolean | undefined;
        distinguished?: DistinguishType | undefined;
        ignoreReports?: boolean | undefined;
        isSelf?: boolean | undefined;
        isVideo?: boolean | undefined;
        isLocked?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        subredditId?: string | undefined;
        upvotes?: number | undefined;
        downvotes?: number | undefined;
        url?: string | undefined;
        isSticky?: boolean | undefined;
        linkFlair?: ({
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } & {
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } & { [K in Exclude<keyof I["linkFlair"], "$type" | keyof LinkFlairV2>]: never; }) | undefined;
        authorFlair?: ({
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } & {
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["authorFlair"], "$type" | keyof UserFlairV2>]: never; }) | undefined;
        spam?: boolean | undefined;
        deleted?: boolean | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof PostV2>]: never; }>(object: I): PostV2;
};
//# sourceMappingURL=postv2.d.ts.map