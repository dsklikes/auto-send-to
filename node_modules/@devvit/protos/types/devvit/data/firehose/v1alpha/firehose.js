/**
 * #firehose.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { Timestamp } from '../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { TriggerEvent } from '../../triggers/v1alpha/triggers.js';
function createBaseFirehoseRequest() {
    return { streamId: "", max: 0, ts: undefined, last: "", events: [], keepAlive: false };
}
export const FirehoseRequest = {
    $type: "devvit.data.firehose.v1alpha.FirehoseRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.streamId !== "") {
            writer.uint32(10).string(message.streamId);
        }
        if (message.max !== 0) {
            writer.uint32(16).int32(message.max);
        }
        if (message.ts !== undefined) {
            Timestamp.encode(toTimestamp(message.ts), writer.uint32(26).fork()).ldelim();
        }
        if (message.last !== "") {
            writer.uint32(34).string(message.last);
        }
        for (const v of message.events) {
            writer.uint32(42).string(v);
        }
        if (message.keepAlive === true) {
            writer.uint32(48).bool(message.keepAlive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamId = reader.string();
                    break;
                case 2:
                    message.max = reader.int32();
                    break;
                case 3:
                    message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.last = reader.string();
                    break;
                case 5:
                    message.events.push(reader.string());
                    break;
                case 6:
                    message.keepAlive = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamId: isSet(object.streamId) ? String(object.streamId) : "",
            max: isSet(object.max) ? Number(object.max) : 0,
            ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
            last: isSet(object.last) ? String(object.last) : "",
            events: Array.isArray(object?.events) ? object.events.map((e) => String(e)) : [],
            keepAlive: isSet(object.keepAlive) ? Boolean(object.keepAlive) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.streamId !== undefined && (obj.streamId = message.streamId);
        message.max !== undefined && (obj.max = Math.round(message.max));
        message.ts !== undefined && (obj.ts = message.ts.toISOString());
        message.last !== undefined && (obj.last = message.last);
        if (message.events) {
            obj.events = message.events.map((e) => e);
        }
        else {
            obj.events = [];
        }
        message.keepAlive !== undefined && (obj.keepAlive = message.keepAlive);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFirehoseRequest();
        message.streamId = object.streamId ?? "";
        message.max = object.max ?? 0;
        message.ts = object.ts ?? undefined;
        message.last = object.last ?? "";
        message.events = object.events?.map((e) => e) || [];
        message.keepAlive = object.keepAlive ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.firehose.v1alpha.FirehoseRequest", FirehoseRequest);
function createBaseFirehoseReply() {
    return { event: undefined };
}
export const FirehoseReply = {
    $type: "devvit.data.firehose.v1alpha.FirehoseReply",
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== undefined) {
            TriggerEvent.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseReply();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = TriggerEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { event: isSet(object.event) ? TriggerEvent.fromJSON(object.event) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = message.event ? TriggerEvent.toJSON(message.event) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFirehoseReply();
        message.event = (object.event !== undefined && object.event !== null)
            ? TriggerEvent.fromPartial(object.event)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.firehose.v1alpha.FirehoseReply", FirehoseReply);
export class FirehoseClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.data.firehose.v1alpha.Firehose";
        this.rpc = rpc;
        this.Stream = this.Stream.bind(this);
    }
    Stream(request) {
        const data = FirehoseRequest.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Stream", data);
        return result.pipe(map((data) => FirehoseReply.decode(new _m0.Reader(data))));
    }
}
export const FirehoseDefinition = {
    name: "Firehose",
    fullName: "devvit.data.firehose.v1alpha.Firehose",
    methods: {
        stream: {
            name: "Stream",
            requestType: FirehoseRequest,
            requestStream: false,
            responseType: FirehoseReply,
            responseStream: true,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
