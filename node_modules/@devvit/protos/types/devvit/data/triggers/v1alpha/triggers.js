/**
 * #triggers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Timestamp } from '../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { AppInstall, AppUpgrade, CommentReport, CommentSubmit, CommentUpdate, PostReport, PostSubmit, PostUpdate, SubredditSubscribe, } from '../../../events/v1alpha/events.js';
function createBaseTriggerEvent() {
    return {
        id: "",
        timestamp: undefined,
        subreddit: "",
        postSubmit: undefined,
        postUpdate: undefined,
        postReport: undefined,
        commentSubmit: undefined,
        commentUpdate: undefined,
        commentReport: undefined,
        subredditSubscribe: undefined,
        appInstall: undefined,
        appUpgrade: undefined,
    };
}
export const TriggerEvent = {
    $type: "devvit.data.triggers.v1alpha.TriggerEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== "") {
            writer.uint32(26).string(message.subreddit);
        }
        if (message.postSubmit !== undefined) {
            PostSubmit.encode(message.postSubmit, writer.uint32(802).fork()).ldelim();
        }
        if (message.postUpdate !== undefined) {
            PostUpdate.encode(message.postUpdate, writer.uint32(810).fork()).ldelim();
        }
        if (message.postReport !== undefined) {
            PostReport.encode(message.postReport, writer.uint32(818).fork()).ldelim();
        }
        if (message.commentSubmit !== undefined) {
            CommentSubmit.encode(message.commentSubmit, writer.uint32(826).fork()).ldelim();
        }
        if (message.commentUpdate !== undefined) {
            CommentUpdate.encode(message.commentUpdate, writer.uint32(834).fork()).ldelim();
        }
        if (message.commentReport !== undefined) {
            CommentReport.encode(message.commentReport, writer.uint32(842).fork()).ldelim();
        }
        if (message.subredditSubscribe !== undefined) {
            SubredditSubscribe.encode(message.subredditSubscribe, writer.uint32(850).fork()).ldelim();
        }
        if (message.appInstall !== undefined) {
            AppInstall.encode(message.appInstall, writer.uint32(858).fork()).ldelim();
        }
        if (message.appUpgrade !== undefined) {
            AppUpgrade.encode(message.appUpgrade, writer.uint32(866).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.subreddit = reader.string();
                    break;
                case 100:
                    message.postSubmit = PostSubmit.decode(reader, reader.uint32());
                    break;
                case 101:
                    message.postUpdate = PostUpdate.decode(reader, reader.uint32());
                    break;
                case 102:
                    message.postReport = PostReport.decode(reader, reader.uint32());
                    break;
                case 103:
                    message.commentSubmit = CommentSubmit.decode(reader, reader.uint32());
                    break;
                case 104:
                    message.commentUpdate = CommentUpdate.decode(reader, reader.uint32());
                    break;
                case 105:
                    message.commentReport = CommentReport.decode(reader, reader.uint32());
                    break;
                case 106:
                    message.subredditSubscribe = SubredditSubscribe.decode(reader, reader.uint32());
                    break;
                case 107:
                    message.appInstall = AppInstall.decode(reader, reader.uint32());
                    break;
                case 108:
                    message.appUpgrade = AppUpgrade.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            subreddit: isSet(object.subreddit) ? String(object.subreddit) : "",
            postSubmit: isSet(object.postSubmit) ? PostSubmit.fromJSON(object.postSubmit) : undefined,
            postUpdate: isSet(object.postUpdate) ? PostUpdate.fromJSON(object.postUpdate) : undefined,
            postReport: isSet(object.postReport) ? PostReport.fromJSON(object.postReport) : undefined,
            commentSubmit: isSet(object.commentSubmit) ? CommentSubmit.fromJSON(object.commentSubmit) : undefined,
            commentUpdate: isSet(object.commentUpdate) ? CommentUpdate.fromJSON(object.commentUpdate) : undefined,
            commentReport: isSet(object.commentReport) ? CommentReport.fromJSON(object.commentReport) : undefined,
            subredditSubscribe: isSet(object.subredditSubscribe)
                ? SubredditSubscribe.fromJSON(object.subredditSubscribe)
                : undefined,
            appInstall: isSet(object.appInstall) ? AppInstall.fromJSON(object.appInstall) : undefined,
            appUpgrade: isSet(object.appUpgrade) ? AppUpgrade.fromJSON(object.appUpgrade) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        message.subreddit !== undefined && (obj.subreddit = message.subreddit);
        message.postSubmit !== undefined &&
            (obj.postSubmit = message.postSubmit ? PostSubmit.toJSON(message.postSubmit) : undefined);
        message.postUpdate !== undefined &&
            (obj.postUpdate = message.postUpdate ? PostUpdate.toJSON(message.postUpdate) : undefined);
        message.postReport !== undefined &&
            (obj.postReport = message.postReport ? PostReport.toJSON(message.postReport) : undefined);
        message.commentSubmit !== undefined &&
            (obj.commentSubmit = message.commentSubmit ? CommentSubmit.toJSON(message.commentSubmit) : undefined);
        message.commentUpdate !== undefined &&
            (obj.commentUpdate = message.commentUpdate ? CommentUpdate.toJSON(message.commentUpdate) : undefined);
        message.commentReport !== undefined &&
            (obj.commentReport = message.commentReport ? CommentReport.toJSON(message.commentReport) : undefined);
        message.subredditSubscribe !== undefined && (obj.subredditSubscribe = message.subredditSubscribe
            ? SubredditSubscribe.toJSON(message.subredditSubscribe)
            : undefined);
        message.appInstall !== undefined &&
            (obj.appInstall = message.appInstall ? AppInstall.toJSON(message.appInstall) : undefined);
        message.appUpgrade !== undefined &&
            (obj.appUpgrade = message.appUpgrade ? AppUpgrade.toJSON(message.appUpgrade) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerEvent();
        message.id = object.id ?? "";
        message.timestamp = object.timestamp ?? undefined;
        message.subreddit = object.subreddit ?? "";
        message.postSubmit = (object.postSubmit !== undefined && object.postSubmit !== null)
            ? PostSubmit.fromPartial(object.postSubmit)
            : undefined;
        message.postUpdate = (object.postUpdate !== undefined && object.postUpdate !== null)
            ? PostUpdate.fromPartial(object.postUpdate)
            : undefined;
        message.postReport = (object.postReport !== undefined && object.postReport !== null)
            ? PostReport.fromPartial(object.postReport)
            : undefined;
        message.commentSubmit = (object.commentSubmit !== undefined && object.commentSubmit !== null)
            ? CommentSubmit.fromPartial(object.commentSubmit)
            : undefined;
        message.commentUpdate = (object.commentUpdate !== undefined && object.commentUpdate !== null)
            ? CommentUpdate.fromPartial(object.commentUpdate)
            : undefined;
        message.commentReport = (object.commentReport !== undefined && object.commentReport !== null)
            ? CommentReport.fromPartial(object.commentReport)
            : undefined;
        message.subredditSubscribe = (object.subredditSubscribe !== undefined && object.subredditSubscribe !== null)
            ? SubredditSubscribe.fromPartial(object.subredditSubscribe)
            : undefined;
        message.appInstall = (object.appInstall !== undefined && object.appInstall !== null)
            ? AppInstall.fromPartial(object.appInstall)
            : undefined;
        message.appUpgrade = (object.appUpgrade !== undefined && object.appUpgrade !== null)
            ? AppUpgrade.fromPartial(object.appUpgrade)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.triggers.v1alpha.TriggerEvent", TriggerEvent);
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
