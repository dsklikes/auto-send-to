/**
 * #firehose-admin.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
function createBaseFirehoseAuthTokenRequest() {
    return { expiration: "", events: [], customer: "" };
}
export const FirehoseAuthTokenRequest = {
    $type: "devvit.gateway.FirehoseAuthTokenRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.expiration !== "") {
            writer.uint32(10).string(message.expiration);
        }
        for (const v of message.events) {
            writer.uint32(18).string(v);
        }
        if (message.customer !== "") {
            writer.uint32(26).string(message.customer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseAuthTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.expiration = reader.string();
                    break;
                case 2:
                    message.events.push(reader.string());
                    break;
                case 3:
                    message.customer = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            expiration: isSet(object.expiration) ? String(object.expiration) : "",
            events: Array.isArray(object?.events) ? object.events.map((e) => String(e)) : [],
            customer: isSet(object.customer) ? String(object.customer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.expiration !== undefined && (obj.expiration = message.expiration);
        if (message.events) {
            obj.events = message.events.map((e) => e);
        }
        else {
            obj.events = [];
        }
        message.customer !== undefined && (obj.customer = message.customer);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFirehoseAuthTokenRequest();
        message.expiration = object.expiration ?? "";
        message.events = object.events?.map((e) => e) || [];
        message.customer = object.customer ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.FirehoseAuthTokenRequest", FirehoseAuthTokenRequest);
function createBaseFirehoseAuthTokenResponse() {
    return { token: "" };
}
export const FirehoseAuthTokenResponse = {
    $type: "devvit.gateway.FirehoseAuthTokenResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseAuthTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.token !== undefined && (obj.token = message.token);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFirehoseAuthTokenResponse();
        message.token = object.token ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.FirehoseAuthTokenResponse", FirehoseAuthTokenResponse);
export class FirehoseAdminClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.gateway.FirehoseAdmin";
        this.rpc = rpc;
        this.GenerateAuthToken = this.GenerateAuthToken.bind(this);
    }
    GenerateAuthToken(request) {
        const data = FirehoseAuthTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GenerateAuthToken", data);
        return promise.then((data) => FirehoseAuthTokenResponse.decode(new _m0.Reader(data)));
    }
}
export const FirehoseAdminDefinition = {
    name: "FirehoseAdmin",
    fullName: "devvit.gateway.FirehoseAdmin",
    methods: {
        /** TODO: Flesh this out more */
        generateAuthToken: {
            name: "GenerateAuthToken",
            requestType: FirehoseAuthTokenRequest,
            requestStream: false,
            responseType: FirehoseAuthTokenResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
