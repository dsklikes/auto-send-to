/**
 * #firehose-admin.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface FirehoseAuthTokenRequest {
    expiration: string;
    events: string[];
    customer: string;
}
export interface FirehoseAuthTokenResponse {
    token: string;
}
export declare const FirehoseAuthTokenRequest: {
    $type: "devvit.gateway.FirehoseAuthTokenRequest";
    encode(message: FirehoseAuthTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FirehoseAuthTokenRequest;
    fromJSON(object: any): FirehoseAuthTokenRequest;
    toJSON(message: FirehoseAuthTokenRequest): unknown;
    fromPartial<I extends {
        expiration?: string | undefined;
        events?: string[] | undefined;
        customer?: string | undefined;
    } & {
        expiration?: string | undefined;
        events?: (string[] & string[] & { [K in Exclude<keyof I["events"], "$type" | keyof string[]>]: never; }) | undefined;
        customer?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof FirehoseAuthTokenRequest>]: never; }>(object: I): FirehoseAuthTokenRequest;
};
export declare const FirehoseAuthTokenResponse: {
    $type: "devvit.gateway.FirehoseAuthTokenResponse";
    encode(message: FirehoseAuthTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FirehoseAuthTokenResponse;
    fromJSON(object: any): FirehoseAuthTokenResponse;
    toJSON(message: FirehoseAuthTokenResponse): unknown;
    fromPartial<I extends {
        token?: string | undefined;
    } & {
        token?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "token">]: never; }>(object: I): FirehoseAuthTokenResponse;
};
export interface FirehoseAdmin {
    /** TODO: Flesh this out more */
    GenerateAuthToken(request: FirehoseAuthTokenRequest, metadata?: Metadata): Promise<FirehoseAuthTokenResponse>;
}
export declare class FirehoseAdminClientImpl implements FirehoseAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GenerateAuthToken(request: FirehoseAuthTokenRequest): Promise<FirehoseAuthTokenResponse>;
}
export type FirehoseAdminDefinition = typeof FirehoseAdminDefinition;
export declare const FirehoseAdminDefinition: {
    readonly name: "FirehoseAdmin";
    readonly fullName: "devvit.gateway.FirehoseAdmin";
    readonly methods: {
        /** TODO: Flesh this out more */
        readonly generateAuthToken: {
            readonly name: "GenerateAuthToken";
            readonly requestType: {
                $type: "devvit.gateway.FirehoseAuthTokenRequest";
                encode(message: FirehoseAuthTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FirehoseAuthTokenRequest;
                fromJSON(object: any): FirehoseAuthTokenRequest;
                toJSON(message: FirehoseAuthTokenRequest): unknown;
                fromPartial<I extends {
                    expiration?: string | undefined;
                    events?: string[] | undefined;
                    customer?: string | undefined;
                } & {
                    expiration?: string | undefined;
                    events?: (string[] & string[] & { [K in Exclude<keyof I["events"], "$type" | keyof string[]>]: never; }) | undefined;
                    customer?: string | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof FirehoseAuthTokenRequest>]: never; }>(object: I): FirehoseAuthTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.FirehoseAuthTokenResponse";
                encode(message: FirehoseAuthTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FirehoseAuthTokenResponse;
                fromJSON(object: any): FirehoseAuthTokenResponse;
                toJSON(message: FirehoseAuthTokenResponse): unknown;
                fromPartial<I_1 extends {
                    token?: string | undefined;
                } & {
                    token?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "token">]: never; }>(object: I_1): FirehoseAuthTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=firehose-admin.d.ts.map