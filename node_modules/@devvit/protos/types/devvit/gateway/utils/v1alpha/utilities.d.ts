/**
 * #utilities.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface AccessKeyPurgeRequest {
    /** the t2_ user id */
    userId: string;
    /** also purge the refresh key */
    includeRefresh: boolean;
}
export interface InstallationsPurgeRequest {
    /** t5 subreddit id */
    subreddit: string;
}
export interface PurgeResult {
    /** Number of items purged */
    count: number;
}
export declare const AccessKeyPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.AccessKeyPurgeRequest";
    encode(message: AccessKeyPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccessKeyPurgeRequest;
    fromJSON(object: any): AccessKeyPurgeRequest;
    toJSON(message: AccessKeyPurgeRequest): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        includeRefresh?: boolean | undefined;
    } & {
        userId?: string | undefined;
        includeRefresh?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AccessKeyPurgeRequest>]: never; }>(object: I): AccessKeyPurgeRequest;
};
export declare const InstallationsPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.InstallationsPurgeRequest";
    encode(message: InstallationsPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallationsPurgeRequest;
    fromJSON(object: any): InstallationsPurgeRequest;
    toJSON(message: InstallationsPurgeRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
    } & {
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I): InstallationsPurgeRequest;
};
export declare const PurgeResult: {
    $type: "devvit.gateway.utils.v1alpha.PurgeResult";
    encode(message: PurgeResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PurgeResult;
    fromJSON(object: any): PurgeResult;
    toJSON(message: PurgeResult): unknown;
    fromPartial<I extends {
        count?: number | undefined;
    } & {
        count?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | "count">]: never; }>(object: I): PurgeResult;
};
export interface CacheUtils {
    PurgeAccessKey(request: AccessKeyPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
}
export declare class CacheUtilsClientImpl implements CacheUtils {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    PurgeAccessKey(request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest): Promise<PurgeResult>;
}
export type CacheUtilsDefinition = typeof CacheUtilsDefinition;
export declare const CacheUtilsDefinition: {
    readonly name: "CacheUtils";
    readonly fullName: "devvit.gateway.utils.v1alpha.CacheUtils";
    readonly methods: {
        readonly purgeAccessKey: {
            readonly name: "PurgeAccessKey";
            readonly requestType: {
                $type: "devvit.gateway.utils.v1alpha.AccessKeyPurgeRequest";
                encode(message: AccessKeyPurgeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AccessKeyPurgeRequest;
                fromJSON(object: any): AccessKeyPurgeRequest;
                toJSON(message: AccessKeyPurgeRequest): unknown;
                fromPartial<I extends {
                    userId?: string | undefined;
                    includeRefresh?: boolean | undefined;
                } & {
                    userId?: string | undefined;
                    includeRefresh?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof AccessKeyPurgeRequest>]: never; }>(object: I): AccessKeyPurgeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.utils.v1alpha.PurgeResult";
                encode(message: PurgeResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PurgeResult;
                fromJSON(object: any): PurgeResult;
                toJSON(message: PurgeResult): unknown;
                fromPartial<I_1 extends {
                    count?: number | undefined;
                } & {
                    count?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | "count">]: never; }>(object: I_1): PurgeResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly purgeInstallations: {
            readonly name: "PurgeInstallations";
            readonly requestType: {
                $type: "devvit.gateway.utils.v1alpha.InstallationsPurgeRequest";
                encode(message: InstallationsPurgeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InstallationsPurgeRequest;
                fromJSON(object: any): InstallationsPurgeRequest;
                toJSON(message: InstallationsPurgeRequest): unknown;
                fromPartial<I_2 extends {
                    subreddit?: string | undefined;
                } & {
                    subreddit?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I_2): InstallationsPurgeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.utils.v1alpha.PurgeResult";
                encode(message: PurgeResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PurgeResult;
                fromJSON(object: any): PurgeResult;
                toJSON(message: PurgeResult): unknown;
                fromPartial<I_1 extends {
                    count?: number | undefined;
                } & {
                    count?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | "count">]: never; }>(object: I_1): PurgeResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=utilities.d.ts.map