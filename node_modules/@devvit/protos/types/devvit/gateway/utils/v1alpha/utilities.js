/**
 * #utilities.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
function createBaseAccessKeyPurgeRequest() {
    return { userId: "", includeRefresh: false };
}
export const AccessKeyPurgeRequest = {
    $type: "devvit.gateway.utils.v1alpha.AccessKeyPurgeRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.includeRefresh === true) {
            writer.uint32(16).bool(message.includeRefresh);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessKeyPurgeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.includeRefresh = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? String(object.userId) : "",
            includeRefresh: isSet(object.includeRefresh) ? Boolean(object.includeRefresh) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        message.includeRefresh !== undefined && (obj.includeRefresh = message.includeRefresh);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAccessKeyPurgeRequest();
        message.userId = object.userId ?? "";
        message.includeRefresh = object.includeRefresh ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.utils.v1alpha.AccessKeyPurgeRequest", AccessKeyPurgeRequest);
function createBaseInstallationsPurgeRequest() {
    return { subreddit: "" };
}
export const InstallationsPurgeRequest = {
    $type: "devvit.gateway.utils.v1alpha.InstallationsPurgeRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== "") {
            writer.uint32(10).string(message.subreddit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInstallationsPurgeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subreddit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subreddit: isSet(object.subreddit) ? String(object.subreddit) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.subreddit !== undefined && (obj.subreddit = message.subreddit);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInstallationsPurgeRequest();
        message.subreddit = object.subreddit ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.utils.v1alpha.InstallationsPurgeRequest", InstallationsPurgeRequest);
function createBasePurgeResult() {
    return { count: 0 };
}
export const PurgeResult = {
    $type: "devvit.gateway.utils.v1alpha.PurgeResult",
    encode(message, writer = _m0.Writer.create()) {
        if (message.count !== 0) {
            writer.uint32(8).int64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePurgeResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.count = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { count: isSet(object.count) ? Number(object.count) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.count !== undefined && (obj.count = Math.round(message.count));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePurgeResult();
        message.count = object.count ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.utils.v1alpha.PurgeResult", PurgeResult);
export class CacheUtilsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.gateway.utils.v1alpha.CacheUtils";
        this.rpc = rpc;
        this.PurgeAccessKey = this.PurgeAccessKey.bind(this);
        this.PurgeInstallations = this.PurgeInstallations.bind(this);
    }
    PurgeAccessKey(request) {
        const data = AccessKeyPurgeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PurgeAccessKey", data);
        return promise.then((data) => PurgeResult.decode(new _m0.Reader(data)));
    }
    PurgeInstallations(request) {
        const data = InstallationsPurgeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PurgeInstallations", data);
        return promise.then((data) => PurgeResult.decode(new _m0.Reader(data)));
    }
}
export const CacheUtilsDefinition = {
    name: "CacheUtils",
    fullName: "devvit.gateway.utils.v1alpha.CacheUtils",
    methods: {
        purgeAccessKey: {
            name: "PurgeAccessKey",
            requestType: AccessKeyPurgeRequest,
            requestStream: false,
            responseType: PurgeResult,
            responseStream: false,
            options: {},
        },
        purgeInstallations: {
            name: "PurgeInstallations",
            requestType: InstallationsPurgeRequest,
            requestStream: false,
            responseType: PurgeResult,
            responseStream: false,
            options: {},
        },
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
