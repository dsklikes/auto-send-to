/**
 * #event_handlers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { AppInstall, AppUpgrade, CommentReport, CommentSubmit, CommentUpdate, PostReport, PostSubmit, PostUpdate, SubredditSubscribe, } from '../../../events/v1alpha/events.js';
function createBaseHandlerResult() {
    return {};
}
export const HandlerResult = {
    $type: "devvit.actor.automation.v1alpha.HandlerResult",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandlerResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseHandlerResult();
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.HandlerResult", HandlerResult);
export class OnPostSubmitClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnPostSubmit";
        this.rpc = rpc;
        this.OnPostSubmit = this.OnPostSubmit.bind(this);
    }
    OnPostSubmit(request) {
        const data = PostSubmit.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostSubmit", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnPostSubmitDefinition = {
    name: "OnPostSubmit",
    fullName: "devvit.actor.automation.v1alpha.OnPostSubmit",
    methods: {
        onPostSubmit: {
            name: "OnPostSubmit",
            requestType: PostSubmit,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnPostUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnPostUpdate";
        this.rpc = rpc;
        this.OnPostUpdate = this.OnPostUpdate.bind(this);
    }
    OnPostUpdate(request) {
        const data = PostUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostUpdate", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnPostUpdateDefinition = {
    name: "OnPostUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnPostUpdate",
    methods: {
        onPostUpdate: {
            name: "OnPostUpdate",
            requestType: PostUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnPostReportClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnPostReport";
        this.rpc = rpc;
        this.OnPostReport = this.OnPostReport.bind(this);
    }
    OnPostReport(request) {
        const data = PostReport.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostReport", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnPostReportDefinition = {
    name: "OnPostReport",
    fullName: "devvit.actor.automation.v1alpha.OnPostReport",
    methods: {
        onPostReport: {
            name: "OnPostReport",
            requestType: PostReport,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnCommentSubmitClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnCommentSubmit";
        this.rpc = rpc;
        this.OnCommentSubmit = this.OnCommentSubmit.bind(this);
    }
    OnCommentSubmit(request) {
        const data = CommentSubmit.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentSubmit", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnCommentSubmitDefinition = {
    name: "OnCommentSubmit",
    fullName: "devvit.actor.automation.v1alpha.OnCommentSubmit",
    methods: {
        onCommentSubmit: {
            name: "OnCommentSubmit",
            requestType: CommentSubmit,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnCommentUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnCommentUpdate";
        this.rpc = rpc;
        this.OnCommentUpdate = this.OnCommentUpdate.bind(this);
    }
    OnCommentUpdate(request) {
        const data = CommentUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentUpdate", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnCommentUpdateDefinition = {
    name: "OnCommentUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnCommentUpdate",
    methods: {
        onCommentUpdate: {
            name: "OnCommentUpdate",
            requestType: CommentUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnCommentReportClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnCommentReport";
        this.rpc = rpc;
        this.OnCommentReport = this.OnCommentReport.bind(this);
    }
    OnCommentReport(request) {
        const data = CommentReport.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentReport", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnCommentReportDefinition = {
    name: "OnCommentReport",
    fullName: "devvit.actor.automation.v1alpha.OnCommentReport",
    methods: {
        onCommentReport: {
            name: "OnCommentReport",
            requestType: CommentReport,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnSubredditSubscribeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnSubredditSubscribe";
        this.rpc = rpc;
        this.OnSubredditSubscribe = this.OnSubredditSubscribe.bind(this);
    }
    OnSubredditSubscribe(request) {
        const data = SubredditSubscribe.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnSubredditSubscribe", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnSubredditSubscribeDefinition = {
    name: "OnSubredditSubscribe",
    fullName: "devvit.actor.automation.v1alpha.OnSubredditSubscribe",
    methods: {
        onSubredditSubscribe: {
            name: "OnSubredditSubscribe",
            requestType: SubredditSubscribe,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnAppInstallClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnAppInstall";
        this.rpc = rpc;
        this.OnAppInstall = this.OnAppInstall.bind(this);
    }
    OnAppInstall(request) {
        const data = AppInstall.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAppInstall", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnAppInstallDefinition = {
    name: "OnAppInstall",
    fullName: "devvit.actor.automation.v1alpha.OnAppInstall",
    methods: {
        onAppInstall: {
            name: "OnAppInstall",
            requestType: AppInstall,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export class OnAppUpgradeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.OnAppUpgrade";
        this.rpc = rpc;
        this.OnAppUpgrade = this.OnAppUpgrade.bind(this);
    }
    OnAppUpgrade(request) {
        const data = AppUpgrade.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAppUpgrade", data);
        return promise.then((data) => HandlerResult.decode(new _m0.Reader(data)));
    }
}
export const OnAppUpgradeDefinition = {
    name: "OnAppUpgrade",
    fullName: "devvit.actor.automation.v1alpha.OnAppUpgrade",
    methods: {
        onAppUpgrade: {
            name: "OnAppUpgrade",
            requestType: AppUpgrade,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
