/**
 * #events.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { CommentV2 } from '../../reddit/v2alpha/commentv2.js';
import { PostV2 } from '../../reddit/v2alpha/postv2.js';
import { SubredditV2 } from '../../reddit/v2alpha/subredditv2.js';
import { UserV2 } from '../../reddit/v2alpha/userv2.js';
export interface PostSubmit {
    post?: PostV2;
    author?: UserV2;
    subreddit?: SubredditV2;
}
export interface PostUpdate {
    post?: PostV2;
    author?: UserV2;
    subreddit?: SubredditV2;
}
export interface PostReport {
    post?: PostV2;
    reporter?: UserV2;
    subreddit?: SubredditV2;
}
export interface CommentSubmit {
    comment?: CommentV2;
    author?: UserV2;
    post?: PostV2;
    subreddit?: SubredditV2;
}
export interface CommentUpdate {
    comment?: CommentV2;
    author?: UserV2;
    post?: PostV2;
    subreddit?: SubredditV2;
}
export interface CommentReport {
    comment?: CommentV2;
    reporter?: UserV2;
    subreddit?: SubredditV2;
}
export interface SubredditSubscribe {
    subreddit?: SubredditV2;
    subscriber?: UserV2;
}
export interface AppInstall {
    subreddit?: SubredditV2;
    installer?: UserV2;
}
export interface AppUpgrade {
    subreddit?: SubredditV2;
    installer?: UserV2;
}
export declare const PostSubmit: {
    $type: "devvit.events.v1alpha.PostSubmit";
    encode(message: PostSubmit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostSubmit;
    fromJSON(object: any): PostSubmit;
    toJSON(message: PostSubmit): unknown;
    fromPartial<I extends {
        post?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        author?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        post?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K_2 in Exclude<keyof I["post"], "$type" | keyof PostV2>]: never; }) | undefined;
        author?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_3 in Exclude<keyof I["author"], "$type" | keyof UserV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof PostSubmit>]: never; }>(object: I): PostSubmit;
};
export declare const PostUpdate: {
    $type: "devvit.events.v1alpha.PostUpdate";
    encode(message: PostUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostUpdate;
    fromJSON(object: any): PostUpdate;
    toJSON(message: PostUpdate): unknown;
    fromPartial<I extends {
        post?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        author?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        post?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K_2 in Exclude<keyof I["post"], "$type" | keyof PostV2>]: never; }) | undefined;
        author?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_3 in Exclude<keyof I["author"], "$type" | keyof UserV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof PostUpdate>]: never; }>(object: I): PostUpdate;
};
export declare const PostReport: {
    $type: "devvit.events.v1alpha.PostReport";
    encode(message: PostReport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostReport;
    fromJSON(object: any): PostReport;
    toJSON(message: PostReport): unknown;
    fromPartial<I extends {
        post?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        reporter?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        post?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K_2 in Exclude<keyof I["post"], "$type" | keyof PostV2>]: never; }) | undefined;
        reporter?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_3 in Exclude<keyof I["reporter"], "$type" | keyof UserV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof PostReport>]: never; }>(object: I): PostReport;
};
export declare const CommentSubmit: {
    $type: "devvit.events.v1alpha.CommentSubmit";
    encode(message: CommentSubmit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentSubmit;
    fromJSON(object: any): CommentSubmit;
    toJSON(message: CommentSubmit): unknown;
    fromPartial<I extends {
        comment?: {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        author?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        post?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        comment?: ({
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K in Exclude<keyof I["comment"], "$type" | keyof CommentV2>]: never; }) | undefined;
        author?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["author"], "$type" | keyof UserV2>]: never; }) | undefined;
        post?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K_2 in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_3 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["post"], "$type" | keyof PostV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_5 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | keyof CommentSubmit>]: never; }>(object: I): CommentSubmit;
};
export declare const CommentUpdate: {
    $type: "devvit.events.v1alpha.CommentUpdate";
    encode(message: CommentUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentUpdate;
    fromJSON(object: any): CommentUpdate;
    toJSON(message: CommentUpdate): unknown;
    fromPartial<I extends {
        comment?: {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        author?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        post?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        comment?: ({
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K in Exclude<keyof I["comment"], "$type" | keyof CommentV2>]: never; }) | undefined;
        author?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["author"], "$type" | keyof UserV2>]: never; }) | undefined;
        post?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K_2 in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_3 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["post"], "$type" | keyof PostV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_5 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | keyof CommentUpdate>]: never; }>(object: I): CommentUpdate;
};
export declare const CommentReport: {
    $type: "devvit.events.v1alpha.CommentReport";
    encode(message: CommentReport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentReport;
    fromJSON(object: any): CommentReport;
    toJSON(message: CommentReport): unknown;
    fromPartial<I extends {
        comment?: {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } | undefined;
        reporter?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
    } & {
        comment?: ({
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
        } & { [K in Exclude<keyof I["comment"], "$type" | keyof CommentV2>]: never; }) | undefined;
        reporter?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["reporter"], "$type" | keyof UserV2>]: never; }) | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K_2 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof CommentReport>]: never; }>(object: I): CommentReport;
};
export declare const SubredditSubscribe: {
    $type: "devvit.events.v1alpha.SubredditSubscribe";
    encode(message: SubredditSubscribe, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditSubscribe;
    fromJSON(object: any): SubredditSubscribe;
    toJSON(message: SubredditSubscribe): unknown;
    fromPartial<I extends {
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
        subscriber?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
    } & {
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
        subscriber?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["subscriber"], "$type" | keyof UserV2>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof SubredditSubscribe>]: never; }>(object: I): SubredditSubscribe;
};
export declare const AppInstall: {
    $type: "devvit.events.v1alpha.AppInstall";
    encode(message: AppInstall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppInstall;
    fromJSON(object: any): AppInstall;
    toJSON(message: AppInstall): unknown;
    fromPartial<I extends {
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
        installer?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
    } & {
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
        installer?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["installer"], "$type" | keyof UserV2>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof AppInstall>]: never; }>(object: I): AppInstall;
};
export declare const AppUpgrade: {
    $type: "devvit.events.v1alpha.AppUpgrade";
    encode(message: AppUpgrade, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppUpgrade;
    fromJSON(object: any): AppUpgrade;
    toJSON(message: AppUpgrade): unknown;
    fromPartial<I extends {
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } | undefined;
        installer?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } | undefined;
    } & {
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
        } & { [K in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
        installer?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["installer"], "$type" | keyof UserV2>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof AppUpgrade>]: never; }>(object: I): AppUpgrade;
};
//# sourceMappingURL=events.d.ts.map