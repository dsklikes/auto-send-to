/**
 * #events.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { CommentV2 } from '../../reddit/v2alpha/commentv2.js';
import { PostV2 } from '../../reddit/v2alpha/postv2.js';
import { SubredditV2 } from '../../reddit/v2alpha/subredditv2.js';
import { UserV2 } from '../../reddit/v2alpha/userv2.js';
function createBasePostSubmit() {
    return { post: undefined, author: undefined, subreddit: undefined };
}
export const PostSubmit = {
    $type: "devvit.events.v1alpha.PostSubmit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostSubmit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.post = PostV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.author = UserV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.post !== undefined && (obj.post = message.post ? PostV2.toJSON(message.post) : undefined);
        message.author !== undefined && (obj.author = message.author ? UserV2.toJSON(message.author) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePostSubmit();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.PostSubmit", PostSubmit);
function createBasePostUpdate() {
    return { post: undefined, author: undefined, subreddit: undefined };
}
export const PostUpdate = {
    $type: "devvit.events.v1alpha.PostUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.post = PostV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.author = UserV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.post !== undefined && (obj.post = message.post ? PostV2.toJSON(message.post) : undefined);
        message.author !== undefined && (obj.author = message.author ? UserV2.toJSON(message.author) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePostUpdate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.PostUpdate", PostUpdate);
function createBasePostReport() {
    return { post: undefined, reporter: undefined, subreddit: undefined };
}
export const PostReport = {
    $type: "devvit.events.v1alpha.PostReport",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.reporter !== undefined) {
            UserV2.encode(message.reporter, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.post = PostV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.reporter = UserV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            reporter: isSet(object.reporter) ? UserV2.fromJSON(object.reporter) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.post !== undefined && (obj.post = message.post ? PostV2.toJSON(message.post) : undefined);
        message.reporter !== undefined && (obj.reporter = message.reporter ? UserV2.toJSON(message.reporter) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePostReport();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.reporter = (object.reporter !== undefined && object.reporter !== null)
            ? UserV2.fromPartial(object.reporter)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.PostReport", PostReport);
function createBaseCommentSubmit() {
    return { comment: undefined, author: undefined, post: undefined, subreddit: undefined };
}
export const CommentSubmit = {
    $type: "devvit.events.v1alpha.CommentSubmit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(26).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentSubmit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.author = UserV2.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.post = PostV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.comment !== undefined && (obj.comment = message.comment ? CommentV2.toJSON(message.comment) : undefined);
        message.author !== undefined && (obj.author = message.author ? UserV2.toJSON(message.author) : undefined);
        message.post !== undefined && (obj.post = message.post ? PostV2.toJSON(message.post) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommentSubmit();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.CommentSubmit", CommentSubmit);
function createBaseCommentUpdate() {
    return { comment: undefined, author: undefined, post: undefined, subreddit: undefined };
}
export const CommentUpdate = {
    $type: "devvit.events.v1alpha.CommentUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(26).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.author = UserV2.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.post = PostV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.comment !== undefined && (obj.comment = message.comment ? CommentV2.toJSON(message.comment) : undefined);
        message.author !== undefined && (obj.author = message.author ? UserV2.toJSON(message.author) : undefined);
        message.post !== undefined && (obj.post = message.post ? PostV2.toJSON(message.post) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommentUpdate();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.CommentUpdate", CommentUpdate);
function createBaseCommentReport() {
    return { comment: undefined, reporter: undefined, subreddit: undefined };
}
export const CommentReport = {
    $type: "devvit.events.v1alpha.CommentReport",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.reporter !== undefined) {
            UserV2.encode(message.reporter, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.reporter = UserV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            reporter: isSet(object.reporter) ? UserV2.fromJSON(object.reporter) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.comment !== undefined && (obj.comment = message.comment ? CommentV2.toJSON(message.comment) : undefined);
        message.reporter !== undefined && (obj.reporter = message.reporter ? UserV2.toJSON(message.reporter) : undefined);
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommentReport();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.reporter = (object.reporter !== undefined && object.reporter !== null)
            ? UserV2.fromPartial(object.reporter)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.CommentReport", CommentReport);
function createBaseSubredditSubscribe() {
    return { subreddit: undefined, subscriber: undefined };
}
export const SubredditSubscribe = {
    $type: "devvit.events.v1alpha.SubredditSubscribe",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.subscriber !== undefined) {
            UserV2.encode(message.subscriber, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubredditSubscribe();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.subscriber = UserV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            subscriber: isSet(object.subscriber) ? UserV2.fromJSON(object.subscriber) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        message.subscriber !== undefined &&
            (obj.subscriber = message.subscriber ? UserV2.toJSON(message.subscriber) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSubredditSubscribe();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.subscriber = (object.subscriber !== undefined && object.subscriber !== null)
            ? UserV2.fromPartial(object.subscriber)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.SubredditSubscribe", SubredditSubscribe);
function createBaseAppInstall() {
    return { subreddit: undefined, installer: undefined };
}
export const AppInstall = {
    $type: "devvit.events.v1alpha.AppInstall",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.installer !== undefined) {
            UserV2.encode(message.installer, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppInstall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.installer = UserV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            installer: isSet(object.installer) ? UserV2.fromJSON(object.installer) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        message.installer !== undefined &&
            (obj.installer = message.installer ? UserV2.toJSON(message.installer) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAppInstall();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.installer = (object.installer !== undefined && object.installer !== null)
            ? UserV2.fromPartial(object.installer)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.AppInstall", AppInstall);
function createBaseAppUpgrade() {
    return { subreddit: undefined, installer: undefined };
}
export const AppUpgrade = {
    $type: "devvit.events.v1alpha.AppUpgrade",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.installer !== undefined) {
            UserV2.encode(message.installer, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppUpgrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.installer = UserV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            installer: isSet(object.installer) ? UserV2.fromJSON(object.installer) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        message.installer !== undefined &&
            (obj.installer = message.installer ? UserV2.toJSON(message.installer) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAppUpgrade();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.installer = (object.installer !== undefined && object.installer !== null)
            ? UserV2.fromPartial(object.installer)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.AppUpgrade", AppUpgrade);
function isSet(value) {
    return value !== null && value !== undefined;
}
