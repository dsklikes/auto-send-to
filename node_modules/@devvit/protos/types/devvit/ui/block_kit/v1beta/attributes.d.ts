/**
 * #attributes.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { BlockActionType, BlockBorderWidth, BlockHorizontalAlignment, BlockVerticalAlignment } from './enums.js';
export interface BlockAlignment {
    vertical?: BlockVerticalAlignment | undefined;
    horizontal?: BlockHorizontalAlignment | undefined;
}
export interface BlockBorder {
    color?: string | undefined;
    width?: BlockBorderWidth | undefined;
}
export interface BlockSize {
    /** Grow this element to fill any free space in the container */
    grow?: boolean | undefined;
    /** Width as a percentage of the parent container's width */
    width?: number | undefined;
    /** Height as a percentage of the parent container's height */
    height?: number | undefined;
}
export interface BlockAction {
    type: BlockActionType;
    id: string;
    data?: {
        [key: string]: any;
    };
}
export declare const BlockAlignment: {
    $type: "devvit.ui.block_kit.v1beta.BlockAlignment";
    encode(message: BlockAlignment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAlignment;
    fromJSON(object: any): BlockAlignment;
    toJSON(message: BlockAlignment): unknown;
    fromPartial<I extends {
        vertical?: BlockVerticalAlignment | undefined;
        horizontal?: BlockHorizontalAlignment | undefined;
    } & {
        vertical?: BlockVerticalAlignment | undefined;
        horizontal?: BlockHorizontalAlignment | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockAlignment>]: never; }>(object: I): BlockAlignment;
};
export declare const BlockBorder: {
    $type: "devvit.ui.block_kit.v1beta.BlockBorder";
    encode(message: BlockBorder, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockBorder;
    fromJSON(object: any): BlockBorder;
    toJSON(message: BlockBorder): unknown;
    fromPartial<I extends {
        color?: string | undefined;
        width?: BlockBorderWidth | undefined;
    } & {
        color?: string | undefined;
        width?: BlockBorderWidth | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockBorder>]: never; }>(object: I): BlockBorder;
};
export declare const BlockSize: {
    $type: "devvit.ui.block_kit.v1beta.BlockSize";
    encode(message: BlockSize, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSize;
    fromJSON(object: any): BlockSize;
    toJSON(message: BlockSize): unknown;
    fromPartial<I extends {
        grow?: boolean | undefined;
        width?: number | undefined;
        height?: number | undefined;
    } & {
        grow?: boolean | undefined;
        width?: number | undefined;
        height?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockSize>]: never; }>(object: I): BlockSize;
};
export declare const BlockAction: {
    $type: "devvit.ui.block_kit.v1beta.BlockAction";
    encode(message: BlockAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAction;
    fromJSON(object: any): BlockAction;
    toJSON(message: BlockAction): unknown;
    fromPartial<I extends {
        type?: BlockActionType | undefined;
        id?: string | undefined;
        data?: {
            [x: string]: any;
        } | undefined;
    } & {
        type?: BlockActionType | undefined;
        id?: string | undefined;
        data?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof BlockAction>]: never; }>(object: I): BlockAction;
};
//# sourceMappingURL=attributes.d.ts.map