/**
 * #view_thing.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
function createBaseViewThingEffect() {
    return { thingId: "" };
}
export const ViewThingEffect = {
    $type: "devvit.ui.effects.v1alpha.ViewThingEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.thingId !== "") {
            writer.uint32(10).string(message.thingId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseViewThingEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.thingId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { thingId: isSet(object.thingId) ? String(object.thingId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.thingId !== undefined && (obj.thingId = message.thingId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseViewThingEffect();
        message.thingId = object.thingId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.ViewThingEffect", ViewThingEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
