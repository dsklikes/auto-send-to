/**
 * #realtime_subscriptions.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { RealtimeEvent } from '../../../events/v1alpha/realtime.js';
function createBaseRealtimeSubscriptionsEffect() {
    return { subscriptionIds: [] };
}
export const RealtimeSubscriptionsEffect = {
    $type: "devvit.ui.effects.v1alpha.RealtimeSubscriptionsEffect",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptionIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeSubscriptionsEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscriptionIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptionIds: Array.isArray(object?.subscriptionIds) ? object.subscriptionIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionIds) {
            obj.subscriptionIds = message.subscriptionIds.map((e) => e);
        }
        else {
            obj.subscriptionIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRealtimeSubscriptionsEffect();
        message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.RealtimeSubscriptionsEffect", RealtimeSubscriptionsEffect);
function createBaseRealtimeSubscriptionEvent() {
    return { event: undefined };
}
export const RealtimeSubscriptionEvent = {
    $type: "devvit.ui.effects.v1alpha.RealtimeSubscriptionEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== undefined) {
            RealtimeEvent.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeSubscriptionEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = RealtimeEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { event: isSet(object.event) ? RealtimeEvent.fromJSON(object.event) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = message.event ? RealtimeEvent.toJSON(message.event) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRealtimeSubscriptionEvent();
        message.event = (object.event !== undefined && object.event !== null)
            ? RealtimeEvent.fromPartial(object.event)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.RealtimeSubscriptionEvent", RealtimeSubscriptionEvent);
function isSet(value) {
    return value !== null && value !== undefined;
}
