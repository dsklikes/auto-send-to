/**
 * GENERATED FILE - DO NOT EDIT
 * See generateGLProxy.cjs.
 */
import WebGLReference from './WebGLReference.js';
import { GLCommand } from '@devvit/protos';
export declare class GLProxy {
    #private;
    constructor(commandBuffer: GLCommand[]);
    activeTexture(): void;
    attachShader(): void;
    bindAttribLocation(): void;
    bindBuffer(): void;
    bindFramebuffer(): void;
    bindRenderbuffer(): void;
    bindTexture(): void;
    blendColor(): void;
    blendEquation(): void;
    blendEquationSeparate(): void;
    blendFunc(): void;
    blendFuncSeparate(): void;
    bufferData(): void;
    bufferSubData(): void;
    checkFramebufferStatus(): void;
    clear(): void;
    clearColor(): void;
    clearDepth(): void;
    clearStencil(): void;
    colorMask(): void;
    compileShader(): void;
    copyTexImage2D(): void;
    copyTexSubImage2D(): void;
    createBuffer(): WebGLReference;
    createFramebuffer(): WebGLReference;
    createProgram(): WebGLReference;
    createRenderbuffer(): WebGLReference;
    createShader(): WebGLReference;
    createTexture(): WebGLReference;
    cullFace(): void;
    deleteBuffer(): void;
    deleteFramebuffer(): void;
    deleteProgram(): void;
    deleteRenderbuffer(): void;
    deleteShader(): void;
    deleteTexture(): void;
    depthFunc(): void;
    depthMask(): void;
    depthRange(): void;
    detachShader(): void;
    disable(): void;
    disableVertexAttribArray(): void;
    drawArrays(): void;
    drawElements(): void;
    enable(): void;
    enableVertexAttribArray(): void;
    finish(): void;
    flush(): void;
    framebufferRenderbuffer(): void;
    framebufferTexture2D(): void;
    frontFace(): void;
    generateMipmap(): void;
    getActiveAttrib(): void;
    getActiveUniform(): void;
    getAttachedShaders(): void;
    getAttribLocation(): void;
    getBufferParameter(): void;
    getContextAttributes(): void;
    getError(): void;
    getExtension(): void;
    getFramebufferAttachmentParameter(): void;
    getParameter(): void;
    getProgramInfoLog(): void;
    getProgramParameter(): void;
    getRenderbufferParameter(): void;
    getShaderInfoLog(): void;
    getShaderParameter(): void;
    getShaderPrecisionFormat(): void;
    getShaderSource(): void;
    getSupportedExtensions(): void;
    getTexParameter(): void;
    getUniform(): void;
    getUniformLocation(): WebGLReference;
    getVertexAttrib(): void;
    getVertexAttribOffset(): void;
    hint(): void;
    isBuffer(): void;
    isContextLost(): void;
    isEnabled(): void;
    isFramebuffer(): void;
    isProgram(): void;
    isRenderbuffer(): void;
    isShader(): void;
    isTexture(): void;
    lineWidth(): void;
    linkProgram(): void;
    polygonOffset(): void;
    renderbufferStorage(): void;
    sampleCoverage(): void;
    scissor(): void;
    shaderSource(): void;
    stencilFunc(): void;
    stencilFuncSeparate(): void;
    stencilMask(): void;
    stencilMaskSeparate(): void;
    stencilOp(): void;
    stencilOpSeparate(): void;
    texParameterf(): void;
    texParameteri(): void;
    uniform1f(): void;
    uniform1i(): void;
    uniform2f(): void;
    uniform2i(): void;
    uniform3f(): void;
    uniform3i(): void;
    uniform4f(): void;
    uniform4i(): void;
    useProgram(): void;
    validateProgram(): void;
    vertexAttrib1f(): void;
    vertexAttrib2f(): void;
    vertexAttrib3f(): void;
    vertexAttrib4f(): void;
    vertexAttribPointer(): void;
    viewport(): void;
    readonly ARRAY_BUFFER = 34962;
    readonly COLOR_BUFFER_BIT = 16384;
    readonly DEPTH_TEST = 2929;
    readonly ELEMENT_ARRAY_BUFFER = 34963;
    readonly FLOAT = 5126;
    readonly STATIC_DRAW = 35044;
    readonly TRIANGLES = 4;
    readonly UNSIGNED_SHORT = 5123;
    readonly VERTEX_SHADER = 35633;
    readonly FRAGMENT_SHADER = 35632;
}
//# sourceMappingURL=GLProxy.d.ts.map