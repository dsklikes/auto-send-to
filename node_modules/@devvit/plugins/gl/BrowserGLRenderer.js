var _BrowserGLRenderer_instances, _BrowserGLRenderer_gl, _BrowserGLRenderer_objects, _BrowserGLRenderer_executeCommand;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Empty } from '@devvit/protos';
import { GLMethodType } from '@devvit/protos';
import { gLMethodToJSON } from '@devvit/protos';
export class BrowserGLRenderer {
    constructor() {
        _BrowserGLRenderer_instances.add(this);
        _BrowserGLRenderer_gl.set(this, void 0);
        _BrowserGLRenderer_objects.set(this, {});
    }
    bind(ctx) {
        __classPrivateFieldSet(this, _BrowserGLRenderer_gl, ctx, "f");
    }
    async Execute(request, _metadata) {
        for (const cmd of request.commands) {
            __classPrivateFieldGet(this, _BrowserGLRenderer_instances, "m", _BrowserGLRenderer_executeCommand).call(this, cmd);
        }
        return Empty.fromPartial({});
    }
}
_BrowserGLRenderer_gl = new WeakMap(), _BrowserGLRenderer_objects = new WeakMap(), _BrowserGLRenderer_instances = new WeakSet(), _BrowserGLRenderer_executeCommand = function _BrowserGLRenderer_executeCommand(cmd) {
    const method = gLMethodToJSON(cmd.method);
    // TODO: remove use of any below
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const args = [];
    const ids = [];
    for (const arg of cmd.args) {
        if (arg.null) {
            args.push(null);
        }
        else if (arg.referenceId) {
            args.push(__classPrivateFieldGet(this, _BrowserGLRenderer_objects, "f")[arg.referenceId]);
            ids.push(arg.referenceId);
        }
        else if (arg.blob) {
            args.push(arg.blob);
        }
        else {
            args.push(arg.scalar?.stringValue || arg.scalar?.numberValue || arg.scalar?.boolValue);
        }
    }
    // TODO: remove use of any below
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const ret = __classPrivateFieldGet(this, _BrowserGLRenderer_gl, "f")[method](...args);
    switch (cmd.type) {
        case GLMethodType.CONSTRUCTOR:
            __classPrivateFieldGet(this, _BrowserGLRenderer_objects, "f")[cmd.referenceId] = ret;
            break;
        case GLMethodType.DESTRUCTOR:
            for (const id of ids) {
                delete __classPrivateFieldGet(this, _BrowserGLRenderer_objects, "f")[id];
            }
            break;
        case GLMethodType.SYNC:
            // TODO
            break;
    }
};
